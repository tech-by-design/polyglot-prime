name: Daily NYeC IG Version Check and Notification

on:
  schedule:
    - cron: '0 11 * * *' # 6.00 AM EST
    - cron: '0 23 * * *' # 6:00 PM EST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check_versions:
    runs-on: ubuntu-latest

    env:
      PROD_URL: "https://shinny.org/us/ny/hrsn/StructureDefinition-SHINNYMeta.json"
      QA_URL: "https://test.shinny.org/StructureDefinition-SHINNYMeta.json"
      PROD_VERSION_FILE: "support/nyec-ig-version/prod_version.txt"
      QA_VERSION_FILE: "support/nyec-ig-version/qa_version.txt"
      HELP_EMAIL: "help@techbd.org"
      TARGET_BRANCH: "nyec-ig-version"

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4


    - name: Install tools
      run: sudo apt-get install -y jq grep

    - name: Fetch and parse PROD version
      id: fetch_prod
      run: |
        echo "Fetching PROD version JSON..."
        curl -sL "$PROD_URL" -o prod_response.json
        cat prod_response.json # DEBUG: Print the downloaded JSON
        PROD_VERSION=$(jq -r '.version' prod_response.json || echo "unknown")
        echo "PROD_VERSION=$PROD_VERSION" >> $GITHUB_ENV
        echo "Fetched PROD version: $PROD_VERSION"

    - name: Fetch and parse QA version
      id: fetch_qa
      run: |
        echo "Fetching QA version JSON..."
        curl -sL "$QA_URL" -o qa_response.json
        cat qa_response.json # DEBUG
        QA_VERSION=$(jq -r '.version' qa_response.json || echo "unknown")
        echo "QA_VERSION=$QA_VERSION" >> $GITHUB_ENV
        echo "Fetched QA version: $QA_VERSION"

    - name: Compare versions
      id: compare_versions
      run: |
        echo "Comparing versions..."
        git fetch origin $TARGET_BRANCH

        # Read stored versions from target branch
        STORED_PROD_VERSION=$(git show origin/$TARGET_BRANCH:$PROD_VERSION_FILE || echo "none")
        STORED_QA_VERSION=$(git show origin/$TARGET_BRANCH:$QA_VERSION_FILE || echo "none")

        echo "Stored PROD version: $STORED_PROD_VERSION"
        echo "Stored QA version:   $STORED_QA_VERSION"

        if [[ "$PROD_VERSION" != "$STORED_PROD_VERSION" ]]; then
          echo "PROD_UPDATED=true" >> $GITHUB_ENV
        else
          echo "PROD_UPDATED=false" >> $GITHUB_ENV
        fi

        if [[ "$QA_VERSION" != "$STORED_QA_VERSION" ]]; then
          echo "QA_UPDATED=true" >> $GITHUB_ENV
        else
          echo "QA_UPDATED=false" >> $GITHUB_ENV
        fi

    - name: Create GitHub Issue for PROD
      if: env.PROD_UPDATED == 'true'
      run: |
        ISSUE_TITLE="PROD - NYeC Published IG Updated to ${PROD_VERSION}"
        ISSUE_BODY="A new version (${PROD_VERSION}) has been published for PROD. Please review and create a release following internal processes."
        API_JSON=$(jq -n --arg title "$ISSUE_TITLE" --arg body "$ISSUE_BODY" '{title: $title, body: $body}')
        RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.ACTIONS_GITHUB_TOKEN }}" -d "$API_JSON" "https://api.github.com/repos/${{ github.repository }}/issues")
        PROD_ISSUE_URL=$(echo "$RESPONSE" | jq -r '.html_url')
        echo "PROD_ISSUE_URL=$PROD_ISSUE_URL" >> $GITHUB_ENV

    - name: Create GitHub Issue for QA
      if: env.QA_UPDATED == 'true'
      run: |
        ISSUE_TITLE="QA - NYeC Published IG Updated to ${QA_VERSION}"
        ISSUE_BODY="A new version (${QA_VERSION}) has been published for QA. Please review and create a release following internal processes."
        API_JSON=$(jq -n --arg title "$ISSUE_TITLE" --arg body "$ISSUE_BODY" '{title: $title, body: $body}')
        RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.ACTIONS_GITHUB_TOKEN }}" -d "$API_JSON" "https://api.github.com/repos/${{ github.repository }}/issues")
        QA_ISSUE_URL=$(echo "$RESPONSE" | jq -r '.html_url')
        echo "QA_ISSUE_URL=$QA_ISSUE_URL" >> $GITHUB_ENV

    - name: Send email for PROD update
      if: env.PROD_UPDATED == 'true'
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: email-smtp.us-east-1.amazonaws.com
        server_port: 587
        username: ${{ secrets.SES_SMTP_USERNAME }}
        password: ${{ secrets.SES_SMTP_PASSWORD }}
        subject: "PROD - NYeC Published IG Updated"
        to: ${{ env.HELP_EMAIL }}
        from: "Tech by Design Notification <no-reply@tx.techbd.org>"
        body: |
          A new PROD version has been detected and an issue has been created:
          Issue Link: ${{ env.PROD_ISSUE_URL }}
          Version: ${{ env.PROD_VERSION }}

    - name: Send email for QA update
      if: env.QA_UPDATED == 'true'
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: email-smtp.us-east-1.amazonaws.com
        server_port: 587
        username: ${{ secrets.SES_SMTP_USERNAME }}
        password: ${{ secrets.SES_SMTP_PASSWORD }}
        subject: "QA - NYeC Published IG Updated"
        to: ${{ env.HELP_EMAIL }}
        from: "Tech by Design Notification <no-reply@tx.techbd.org>"
        body: |
          A new QA version has been detected and an issue has been created:
          Issue Link: ${{ env.QA_ISSUE_URL }}
          Version: ${{ env.QA_VERSION }}

    - name: Update stored version numbers at branch - $TARGET_BRANCH
      run: |
        echo "Updating version files in $TARGET_BRANCH..."
        git checkout $TARGET_BRANCH

        if [[ "$PROD_UPDATED" == "true" ]]; then
          echo "$PROD_VERSION" > $PROD_VERSION_FILE
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add $PROD_VERSION_FILE
          git commit -m "ci: update stored IG prod version"
          git push origin $TARGET_BRANCH
        fi
        if [[ "$QA_UPDATED" == "true" ]]; then
          echo "$QA_VERSION" > $QA_VERSION_FILE
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add $QA_VERSION_FILE
          git commit -m "ci: update stored IG qa version"
          git push origin $TARGET_BRANCH
        fi

    - name: Handle errors
      if: failure()
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: email-smtp.us-east-1.amazonaws.com
        server_port: 587
        username: ${{ secrets.SES_SMTP_USERNAME }}
        password: ${{ secrets.SES_SMTP_PASSWORD }}
        subject: "[Alert] Failure in NYeC Published IG Check Workflow"
        to: ${{ env.HELP_EMAIL }}
        from: "Tech by Design Alert <no-reply@tx.techbd.org>"
        body: |
          The daily version check workflow has failed. 
          Please review the GitHub Actions logs for details.
