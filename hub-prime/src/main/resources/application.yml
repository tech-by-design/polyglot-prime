# when using environment variables, use this pattern:
# `${${SPRING_PROFILES_ACTIVE}_TECHBD_xyz_abc_def:}`
# - sandbox_TECHBD_xyz_abc_def
# - devl_TECHBD_xyz_abc_def
# - stage_TECHBD_xyz_abc_def
# - prod_TECHBD_xyz_abc_def

logging:
  level:
    com:
      opencsv: ERROR
    org:
      springframework: INFO
      hibernate: ERROR
      web: DEBUG
      techbd:
        service:
          http:
            hub:
              prime:
                api: INFO
    ca:
      uhn: WARN
    root: INFO
    io:
      opentelemetry: TRACE
      micrometer: TRACE
spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  main:
    allow-bean-definition-overriding: true
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  application:
    name: techbd-hub-prime
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
    show-sql: true
  mail:
    host: sandbox.smtp.mailtrap.io
    port: 2525
    username: 81bdb4df5dbf13
    password: 8d8fbb25e43ffc
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
      file-size-threshold: 2MB
      resolve-lazily: true
springdoc:
  api-docs:
    path: /docs/api/openapi
  swagger-ui.path: /docs/api/interactive/index.html
  swagger-ui:
    doc-expansion: none
  show-actuator: true 

server:
  servlet:
    context-path: /
    session:
      cookie:
        secure: true
        http-only: true
        same-site: LAX
      timeout: 60m

org:
  techbd:
    service:
      http:
        hub:
          prime:
            version: @project.version@
            fhirVersion: r4
            validation-severity-level: error  # Possible values: fatal, error, warning, information
            ig-packages:
              fhir-v4:
                shinny-packages:
                # Any new version of shinny should follow the naming convention: shinny-v<version> in kebab-case
                # Example: shinny-v1-2-3 for version 1.2.3
                # Any new version for test-shinny should follow the naming convention: test-shinny-v<version> in kebab-case
                # Example: test-shinny-v1-3-0 for version 1.3.0
                  test-shinny-v1-5-1:
                    profile-base-url: http://test.shinny.org/us/ny/hrsn
                    package-path: ig-packages/shin-ny-ig/test-shinny/v1.5.1
                    # NOTE: When updating this IG version:
                    # 1. Update BaseIgValidationTest.getIgPackages()
                    # 2. Download latest examples to hub-prime/src/test/resources/org/techbd/ig-examples/test-shinny-examples
                    # 3. Verify OrchestrationEngineTest and IgPublicationIssuesTest pass
                    ig-version: 1.5.1
                  shinny-v1-4-5:
                    profile-base-url: http://shinny.org/us/ny/hrsn
                    package-path: ig-packages/shin-ny-ig/shinny/v1.4.5
                    # NOTE: When updating this IG version:
                    # 1. Update BaseIgValidationTest.getIgPackages()
                    # 2. Download latest examples to hub-prime/src/test/resources/org/techbd/ig-examples/shinny-examples
                    # 3. Verify OrchestrationEngineTest and IgPublicationIssuesTest pass
                    ig-version: 1.4.5
                base-packages:
                # Base packages for external dependencies 
                  us-core: ig-packages/fhir-v4/us-core/stu-7.0.0
                  sdoh: ig-packages/fhir-v4/sdoh-clinicalcare/stu-2.2.0
                  uv-sdc: ig-packages/fhir-v4/uv-sdc/stu-3.0.0
            baseFHIRURL: http://test.shinny.org/us/ny/hrsn #This is the default FHIR url used in generating FHIR from CSV
            structureDefinitionsUrls:
              bundle: /StructureDefinition/SHINNYBundleProfile
              patient: /StructureDefinition/shinny-patient
              consent: /StructureDefinition/shinny-Consent
              encounter: /StructureDefinition/shinny-encounter
              organization: /StructureDefinition/shin-ny-organization
              observation: /StructureDefinition/shinny-observation-screening-response
              questionnaire: /StructureDefinition/shinny-questionnaire
              practitioner: /StructureDefinition/shin-ny-practitioner
              questionnaireResponse: /StructureDefinition/shinny-questionnaire
              observationSexualOrientation: /StructureDefinition/shinny-observation-sexual-orientation
              procedure: /StructureDefinition/shinny-sdoh-procedure
            defaultDatalakeApiUrl: https://uzrlhp39e0.execute-api.us-east-1.amazonaws.com/dev/HRSNBundle
            dataLedgerApiUrl: https://gbp2obo8d0.execute-api.us-east-1.amazonaws.com/development/DataLedger 
            dataLedgerTracking: false
            dataLedgerDiagnostics: true
            operationOutcomeHelpUrl: "https://techbd.org/get-help/"
            fhirUmlsApiKey: umls_api_key
            defaultDataLakeApiAuthn:
              # The allowed values for mTlsStrategy are as follows:
              # - no-mTls: No mTLS is used. The WebClient sends a standard HTTP POST request to the scoring engine API without mutual TLS (mTLS).
              # - mTlsResources: mTLS is enabled. The WebClient reads the TLS key and certificate from a local folder, and then sends an HTTPS POST request to the scoring engine API with mutual TLS authentication.
              # - aws-secrets: mTLS is enabled. The WebClient retrieves the TLS key and certificate from AWS Secrets Manager, and then sends an HTTPS POST request to the scoring engine API with mutual TLS authentication.
              # - post-stdin-payload-to-nyec-datalake-external: This option runs a bash script via ProcessBuilder. The payload is passed through standard input (STDIN) to the script, which uses `curl` to send the request to the scoring engine API. In the `phiqa` environment, mTLS is enabled for this request. In other environments, mTLS is disabled for this script.
              # - with-api-key-auth: API key authentication is used. The WebClient sends an HTTP POST request to the scoring engine API, including an API key in the headers.
              mTlsStrategy: with-api-key-auth
              withApiKeyAuth:
                  apiKeyHeaderName: x-api-key  # The name of the HTTP header to send the API key
                  apiKeySecretName: techbd-nyec-api-key  # Store securely in an environment variable (avoid hardcoding)
              mTlsResources:
                # Path to the TLS key resource for mTLS.
                mTlsKeyResourceName: src/main/resources/certificates/scoring-engine/nyec-client-key.key # File is blank by default.Add key here
                # Path to the TLS certificate resource for mTLS.
                mTlsCertResourceName: src/main/resources/certificates/scoring-engine/nyec-cert.pem # File is blank by default.Add certificate here
              mTlsAwsSecrets: 
                mTlsKeySecretName: techbd-qa-client-key # The name of the AWS Secrets Manager secret that holds the mTLS private key
                mTlsCertSecretName: techbd-qa-client-certificate  # The name of the AWS Secrets Manager secret that holds the mTLS client certificate
              postStdinPayloadToNyecDataLakeExternal:
                # The command requires tenantId as argument 1 and payload via STDIN
                # The command will return a status as a normal process and STDOUT will include all verbose debugging
                #cmd: support/bin/post-stdin-payload-to-nyec-datalake-qa-endpoint-via-mtls.sh
                cmd: ../support/bin/post-stdin-payload-to-nyec-datalake-qa-endpoint-sandbox-test.sh
                # Wait time to receive response from scoring engine
                timeout: 180
        interactions:
          defaultPersistStrategy: "{ \"nature\": \"fs\" }"
          persist:
            db:
              uri-matcher:
                # TODO: figure out why this is not being read in InteractionsFilter
                regex:
                  - .*
                  - [^/Bundle/.*, POST, persistReqPayload persistRespPayload]         
          saveUserDataToInteractions: true
    udi:
      prime:
        jdbc: 
          # the reason `url` and `jdbcUrl` are both supplied is that some poolers
          # like `url` while others (e.g. Hikari, the default) like `jdbcUrl`
          url: ${${SPRING_PROFILES_ACTIVE}_TECHBD_UDI_DS_PRIME_JDBC_URL:}
          jdbcUrl: ${${SPRING_PROFILES_ACTIVE}_TECHBD_UDI_DS_PRIME_JDBC_URL:}
          username: ${${SPRING_PROFILES_ACTIVE}_TECHBD_UDI_DS_PRIME_JDBC_USERNAME:}
          password: ${${SPRING_PROFILES_ACTIVE}_TECHBD_UDI_DS_PRIME_JDBC_PASSWORD:}
          driverClassName: org.postgresql.Driver
          maximumPoolSize: 500 # Set to 500 as per your request
          minimumIdle: 100  # Minimum idle connections in the pool
          idleTimeout: 300000 # 30 seconds to wait for a connection from the pool
          connectionTimeout: 30000  # 5 minutes - idle connections are removed after this time
          maxLifetime: 1800000  # 30 minutes - connections are refreshed after this time
management:
  tracing:
    sampling:
      probability: 1.0
  otlp:
    metrics: 
      export: 
        url: ${TECHBD_OPEN_OBSERVE_URL}/api/${TECHBD_OPEN_OBSERVE_STREAM_NAME}/v1/metrics
        enabled: true 
        step: 1m # Interval for pushing metrics 
        headers: 
          enabled: true 
          Authorization: Basic ${TECHBD_OPEN_OBSERVE_PASSWORD}
          organization: default
          service: 
            name: default
    tracing: 
      export:
        enabled: true
      endpoint: ${TECHBD_OPEN_OBSERVE_URL}/api/${TECHBD_OPEN_OBSERVE_STREAM_NAME}/v1/traces
      headers: 
        enabled: true  
        Authorization: Basic ${TECHBD_OPEN_OBSERVE_PASSWORD}
        organization: default
        stream-name: ${TECHBD_OPEN_OBSERVE_STREAM_NAME}-traces
        service: 
          name: default