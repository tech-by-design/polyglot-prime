/**
 * Function to register an exception and its diagnostics in the database.
 * If you want to add more diagnostics to the same exception_id, just use
 * the return value from the previous call and call register_issue multiple
 * times with the same exception_id. 
 *
 * @param exception_id TEXT (nullable) - The unique ID for the exception. If NULL, a new UUID will be generated.
 * @param exception_key TEXT - A key to identify the exception.
 * @param error_msg TEXT - The error message associated with the exception.
 * @param sqlstate TEXT - The SQL state code returned by the database.
 * @param pg_detail TEXT - Detailed error message provided by PostgreSQL.
 * @param pg_hint TEXT - Hint provided by PostgreSQL to resolve the error.
 * @param pg_context TEXT - Context of the error as provided by PostgreSQL.
 * @param created_by TEXT (nullable) - The user who created the record. Defaults to the current user if NULL.
 * @param provenance TEXT (nullable) - The provenance of the record. Defaults to 'unknown' if NULL.
 * @return TEXT - The ID of the registered exception.
 */
DROP FUNCTION IF EXISTS techbd_udi_ingress.register_issue(text, text, text, text, text, text, text, text, text, text, jsonb);
DROP FUNCTION IF EXISTS techbd_udi_ingress.register_issue(text, text, text, text, text, text, text, text, text, text, jsonb, text, text);
CREATE OR REPLACE FUNCTION techbd_udi_ingress.register_issue(
    IN exception_id TEXT,
    IN exception_key TEXT,
    IN error_msg TEXT,
    IN exception_type TEXT,
    IN sqlstate TEXT,
    IN pg_detail TEXT,
    IN pg_hint TEXT,
    IN pg_context TEXT,
    IN created_by TEXT DEFAULT NULL,
    IN provenance TEXT DEFAULT NULL,
    IN elaboration JSONB DEFAULT NULL,
    IN p_tenant_id text DEFAULT NULL::text, 
    IN p_hub_interaction_id text DEFAULT NULL::text
)
RETURNS TEXT
LANGUAGE plpgsql
AS $$
DECLARE
    v_exception_id TEXT := COALESCE(exception_id, gen_random_uuid()::text);
    v_created_by TEXT := COALESCE(created_by, current_user);
    v_provenance TEXT := COALESCE(provenance, 'unknown');
BEGIN
    -- Insert into hub_diagnostic, ignore conflicts
    INSERT INTO techbd_udi_ingress.hub_diagnostic (hub_diagnostic_id, key, created_at, created_by, provenance)
    VALUES (v_exception_id, exception_key, clock_timestamp(), v_created_by, v_provenance)
    ON CONFLICT (hub_diagnostic_id) DO NOTHING;

    -- Insert into sat_diagnostic_exception
    INSERT INTO techbd_udi_ingress.sat_diagnostic_exception (
        sat_diagnostic_exception_id, hub_diagnostic_id, exception_type, message, err_returned_sqlstate,
        err_pg_exception_detail, err_pg_exception_hint, err_pg_exception_context, elaboration, created_at, created_by, provenance, tenant_id, hub_interaction_id
    )
    VALUES (
        gen_random_uuid()::text, v_exception_id, exception_type, error_msg, sqlstate,
        pg_detail, pg_hint, pg_context, elaboration, clock_timestamp(), v_created_by, v_provenance, p_tenant_id, p_hub_interaction_id
    );

    -- Return the exception ID
    RETURN v_exception_id;
END;
$$;

/*==============================================================================================================*/
CREATE OR REPLACE FUNCTION techbd_udi_ingress.convert_csv_to_json(p_csv_data text, p_delimiter text DEFAULT ','::text)
 RETURNS jsonb
 LANGUAGE plpgsql
AS $function$
DECLARE
  	json_result jsonb;
	field_names text[];
	sql_query text;
	i int;
	sample_json jsonb;
	 first_line text;
begin
	
-- Check if the delimiter is present in the CSV data
  first_line := (SELECT unnest(string_to_array(p_csv_data, E'\n')) LIMIT 1);
  IF position(p_delimiter in first_line) = 0 THEN
    RAISE EXCEPTION 'Delimiter "%" not found in the CSV data.', p_delimiter;
  END IF;
 
  -- Wrap CTE in a subquery to avoid syntax error
  WITH row_data AS (
    SELECT jsonb_agg(
      to_jsonb(
        string_to_array(line, p_delimiter)
      )
    ) AS json_obj
    FROM (
      SELECT unnest(string_to_array(p_csv_data, E'\n')) AS line
    ) AS s
  )
  -- Select the aggregated JSONB object into a variable
  SELECT json_obj INTO json_result FROM row_data;
  -- Return the aggregated JSONB object
  RETURN json_result;
END;
$function$
;

/*==============================================================================================================*/
CREATE OR REPLACE FUNCTION techbd_udi_ingress.generate_view_ddl(where_clause text DEFAULT 'content_type = ''text/csv'''::text)
 RETURNS SETOF text
 LANGUAGE plpgsql
AS $function$
DECLARE
    rec RECORD;
    view_ddl text := '';
    column_names TEXT[];
    view_name text := '';
BEGIN
    FOR rec IN EXECUTE 'SELECT artifact_id, content, provenance FROM artifact WHERE ' || where_clause
    LOOP
        -- Extract column names from the first row of content_json
       	column_names := ARRAY(SELECT jsonb_array_elements_text((rec.content::jsonb)->0));
        
        -- Extract view name from provenance JSON
        view_name := (rec.provenance::jsonb)->>'viewName';
       
        -- Generate the DROP VIEW IF EXISTS statement
        view_ddl := 'DROP VIEW IF EXISTS ' || quote_ident(view_name) || ';';       	 
        RETURN NEXT view_ddl;
        
        -- Generate the CREATE VIEW statement
        view_ddl := 'CREATE VIEW ' || quote_ident(view_name) || ' AS SELECT ';
        
        -- Add column definitions to the CREATE VIEW statement
        /*FOR i IN 1 .. array_length(column_names, 1)
        LOOP
            view_ddl := view_ddl || 'content::jsonb->>' || quote_ident(column_names[i]) || ' AS ' || quote_ident(column_names[i]);
            IF i < array_length(column_names, 1) THEN
                view_ddl := view_ddl || ', ';
            END IF;
        END LOOP;*/
              
		FOR i IN 1 .. array_length(column_names, 1)
		LOOP
		    view_ddl := view_ddl || 'json_data_array->>' || i-1 || ' AS ' || column_names[i];
			IF i < array_length(column_names, 1) THEN
			    view_ddl := view_ddl || ', ';
			END IF;
		END LOOP;
        
        -- Add the FROM clause with the artifact_id condition
        --view_ddl := view_ddl || ' FROM artifact WHERE artifact_id = ' || quote_literal(rec.artifact_id) || ';';       
       	--view_ddl := view_ddl || ' FROM artifact, jsonb_array_elements(content::jsonb) WITH ORDINALITY arr(json_data_array, ord) WHERE arr.ord > 1 and artifact_id = ' || quote_literal(rec.artifact_id) || ';';
        
        RETURN NEXT view_ddl;
    END LOOP;
    RETURN;
END;
$function$
;