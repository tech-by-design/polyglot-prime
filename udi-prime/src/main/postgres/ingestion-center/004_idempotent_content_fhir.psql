/*******************************************************************************************
 * Comprehensive view of FHIR Content Screening. * 
 ******************************************************************************************/

DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_info CASCADE;  
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_info
AS SELECT hub_interaction_id,
    qe_name,
    org_id,
    org_name,
    last_name,
    full_name,
    first_name,
    submitted_date_time,
    patient_mrn,
        CASE
            WHEN survey_date_time ~ '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(T| )\d{2}:\d{2}:\d{2}(\.\d{2})?(Z)?$'::text THEN
            CASE
                WHEN survey_date_time::timestamp with time zone IS NOT NULL THEN survey_date_time::timestamp with time zone
                ELSE NULL::timestamp with time zone
            END
            ELSE NULL::timestamp with time zone
        END AS survey_date_time,
    areas_of_interest,
    total_safety_score
   FROM techbd_udi_ingress.sat_interaction_fhir_screening_info
   ORDER BY submitted_date_time DESC;

/*============================================================================================================*/

/*******************************************************************************************
 * View of FHIR Screening Questions and Answers. *
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_patient_screening_questions_answers CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_patient_screening_questions_answers
AS WITH filtered_resources AS (
    SELECT
        sihr.hub_interaction_id,
        sihr.tenant_id,
        jsonb_array_elements(sihr.payload -> 'entry') AS entry,
        sihr.patient_mrn
    FROM techbd_udi_ingress.sat_interaction_fhir_request sihr
    WHERE sihr.uri IN (
        '/Bundle', '/Bundle/', '/flatfile/csv/Bundle', '/flatfile/csv/Bundle/',
        '/ccda/Bundle', '/ccda/Bundle/', '/hl7v2/Bundle', '/hl7v2/Bundle/'
    )
    AND sihr.nature = 'Original FHIR Payload' 
),
filtered_data AS (
    SELECT
        fr.hub_interaction_id,
        fr.tenant_id,
        fr.entry -> 'resource' AS resource,
        (fr.entry -> 'resource') ->> 'resourceType' AS resource_type,
        fr.patient_mrn
    FROM filtered_resources fr
    WHERE (fr.entry -> 'resource' ->> 'resourceType') = 'Observation'
),
single_answers AS (
    SELECT
        hub_interaction_id,
        tenant_id,
        resource,
        resource_type,
        patient_mrn,
        (((resource -> 'code') -> 'coding') -> 0) ->> 'display' AS question,
        (((resource -> 'code') -> 'coding') -> 0) ->> 'code' AS question_code,
        (((resource -> 'valueCodeableConcept') -> 'coding') -> 0) ->> 'display' AS answer,
        (((resource -> 'valueCodeableConcept') -> 'coding') -> 0) ->> 'code' AS answer_code
    FROM filtered_data
    WHERE resource_type = 'Observation'
    AND resource ? 'valueCodeableConcept'
),
multi_answers AS (
    SELECT
        fd.hub_interaction_id,
        fd.tenant_id,
        fd.resource,
        fd.resource_type,
        fd.patient_mrn,
        comp -> 'code' -> 'coding' -> 0 ->> 'display' AS question,
        comp -> 'code' -> 'coding' -> 0 ->> 'code' AS question_code,
        coding ->> 'display' AS answer,
        coding ->> 'code' AS answer_code
    FROM filtered_data fd 
    CROSS JOIN LATERAL jsonb_array_elements(fd.resource -> 'component') AS comp
    CROSS JOIN LATERAL jsonb_array_elements(comp -> 'valueCodeableConcept' -> 'coding') AS coding
    WHERE fd.resource_type = 'Observation'
    AND fd.resource ? 'component'
)
SELECT
    hub_interaction_id,
    tenant_id,
    patient_mrn,
    resource,
    resource_type,
    question,
    question_code,
    answer,
    answer_code
FROM single_answers 

UNION ALL

SELECT
    hub_interaction_id,
    tenant_id,
    patient_mrn,
    resource,
    resource_type,
    question,
    question_code,
    answer,
    answer_code
FROM multi_answers ;

/*******************************************************************************************
 * Stored Procedure for FHIR Screening Questions and Answers with Filtering. *
 ******************************************************************************************/
DROP FUNCTION IF EXISTS techbd_udi_ingress.get_fhir_patient_screening_questions_answers1(TEXT, TEXT);
DROP FUNCTION IF EXISTS techbd_udi_ingress.get_fhir_patient_screening_questions_answers(TEXT, TEXT);
CREATE OR REPLACE FUNCTION techbd_udi_ingress.get_fhir_patient_screening_questions_answers(
    p_hub_interaction_id TEXT DEFAULT NULL,
    p_patient_mrn TEXT DEFAULT NULL
)
RETURNS TABLE (
    hub_interaction_id TEXT,
    tenant_id TEXT, 
    resource_type TEXT,
    patient_mrn TEXT,
    question TEXT,
    question_code TEXT,
    answer TEXT,
    answer_code TEXT
) AS $$
BEGIN
    RETURN QUERY
    WITH filtered_resources AS (
         SELECT sihr.hub_interaction_id,
            sihr.tenant_id,
            jsonb_array_elements(sihr.payload -> 'entry'::text) AS entry,
            sihr.patient_mrn
           FROM techbd_udi_ingress.sat_interaction_fhir_request sihr
          WHERE
          sihr.uri IN ('/Bundle', '/Bundle/','/flatfile/csv/Bundle', '/flatfile/csv/Bundle/', '/ccda/Bundle', '/ccda/Bundle/','/hl7v2/Bundle', '/hl7v2/Bundle/')
          AND sihr.nature = 'Original FHIR Payload'::text
          -- Apply filters if provided
          AND (p_hub_interaction_id IS NULL OR sihr.hub_interaction_id = p_hub_interaction_id)
          AND (p_patient_mrn IS NULL OR sihr.patient_mrn = p_patient_mrn)
        ), filtered_data AS (
         SELECT fr.hub_interaction_id,
            fr.tenant_id,
            fr.entry -> 'resource'::text AS resource,
            (fr.entry -> 'resource'::text) ->> 'resourceType'::text AS resource_type,
            fr.patient_mrn
           FROM filtered_resources fr
          WHERE (fr.entry -> 'resource' ->> 'resourceType') = 'Observation'
        ), single_answers AS (
         SELECT fd.hub_interaction_id,
            fd.tenant_id,
            fd.resource_type,
            fd.patient_mrn,
            (((fd.resource -> 'code') -> 'coding') -> 0) ->> 'display' AS question,
            (((fd.resource -> 'code') -> 'coding') -> 0) ->> 'code' AS question_code, 
            CASE 
                WHEN (((fd.resource -> 'valueCodeableConcept') -> 'coding') -> 0 ->> 'display') = '{Number}'
                THEN (fd.resource -> 'valueCodeableConcept' ->> 'text')
                ELSE (((fd.resource -> 'valueCodeableConcept') -> 'coding') -> 0 ->> 'display')
            END AS answer,            
            (((fd.resource -> 'valueCodeableConcept') -> 'coding') -> 0) ->> 'code' AS answer_code
           FROM filtered_data fd
          WHERE fd.resource_type = 'Observation'
            AND fd.resource ? 'valueCodeableConcept'
        ), multi_answers AS (
         SELECT fd.hub_interaction_id,
            fd.tenant_id,
            fd.resource_type,
            fd.patient_mrn,
            comp -> 'code' -> 'coding' -> 0 ->> 'display' AS question,
            comp -> 'code' -> 'coding' -> 0 ->> 'code' AS question_code,
            CASE 
                WHEN (coding ->> 'display') = '{Number}'
                THEN (comp -> 'valueCodeableConcept' ->> 'text')
                ELSE (coding ->> 'display')
            END AS answer,            
            coding ->> 'code' AS answer_code
           FROM filtered_data fd
           CROSS JOIN LATERAL jsonb_array_elements(fd.resource -> 'component') AS comp
           CROSS JOIN LATERAL jsonb_array_elements(comp -> 'valueCodeableConcept' -> 'coding') AS coding
          WHERE fd.resource_type = 'Observation'
            AND fd.resource ? 'component'
        )
    SELECT sa.hub_interaction_id,
        sa.tenant_id,
        sa.resource_type,
        sa.patient_mrn,
        sa.question,
        sa.question_code,
        sa.answer,
        sa.answer_code
       FROM single_answers sa
     UNION ALL
     SELECT ma.hub_interaction_id,
        ma.tenant_id,
        ma.resource_type,
        ma.patient_mrn,
        ma.question,
        ma.question_code,
        ma.answer,
        ma.answer_code
       FROM multi_answers ma;
END;
$$ LANGUAGE plpgsql;


/*******************************************************************************************
 * Comprehensive view of FHIR Content Details Screening. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_detail CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_detail
AS  WITH filtered_resources AS (
         SELECT sihr.hub_interaction_id,
            sihr.tenant_id,
            jsonb_array_elements(sihr.payload -> 'entry'::text) AS entry
           FROM techbd_udi_ingress.sat_interaction_fhir_request sihr
          WHERE sihr.uri IN ('/Bundle', '/Bundle/','/flatfile/csv/Bundle', '/flatfile/csv/Bundle/', '/ccda/Bundle', '/ccda/Bundle/', '/hl7v2/Bundle', '/hl7v2/Bundle/') AND sihr.nature = 'Original FHIR Payload'::text
        ), filtered_data AS (
         SELECT filtered_resources.hub_interaction_id,
            filtered_resources.tenant_id,
            filtered_resources.entry -> 'resource'::text AS resource,
            (filtered_resources.entry -> 'resource'::text) ->> 'resourceType'::text AS resource_type,
            ( SELECT (entry_inner.value -> 'resource'::text) ->> 'id'::text
                   FROM techbd_udi_ingress.sat_interaction_fhir_request sihr_inner
                     CROSS JOIN LATERAL jsonb_array_elements(sihr_inner.payload -> 'entry'::text) entry_inner(value)
                  WHERE ((entry_inner.value -> 'resource'::text) ->> 'resourceType'::text) = 'Patient'::text AND sihr_inner.hub_interaction_id = filtered_resources.hub_interaction_id
                 LIMIT 1) AS patient_mrn
           FROM filtered_resources
        )
 SELECT hub_interaction_id,
    tenant_id,
    resource,
    resource_type,
    patient_mrn
   FROM filtered_data;


/*******************************************************************************************
 * Comprehensive view of FHIR Content Screening Patient. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_patient CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_patient
AS 
 SELECT  qe_name,
     patient_mrn,
    max(patient_id) AS patient_id,
    max(patient_type) AS patient_type,
    max(patient_full_name) AS patient_full_name,
    max(patient_first_name) AS patient_first_name,
    max(patient_last_name) AS patient_last_name,
    max(patient_gender) AS patient_gender,
    max(patient_birth_date) AS patient_birth_date,
    max(patient_address) AS patient_address,
    max(patient_city) AS patient_city,
    max(patient_state) AS patient_state,
    max(patient_postal_code) AS patient_postal_code,
    max(patient_language) AS patient_language,
    max(patient_ssn) AS patient_ssn,
    max(org_id) AS org_id,
    max(created_at) as created_at,
    primary_org_id
   FROM techbd_udi_ingress.sat_interaction_fhir_screening_patient 
  GROUP BY qe_name, patient_mrn, primary_org_id
  ORDER BY created_at DESC;


/*******************************************************************************************
 * Comprehensive view of FHIR Content Screening Organization. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_screening_organization CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_screening_organization
AS 
  select
	sifso.qe_name,
	sifso.org_id,
	max(sifso.org_type) as org_type,
	max(sifso.org_name) as org_name,
	max(sifso.org_active) as org_active,
	max(sifso.org_address) as org_address,
	max(sifso.org_city) as org_city,
	max(sifso.org_state) as org_state,
	max(sifso.org_postal_code) as org_postal_code,
	max(sifso.created_at) as created_at
from
	techbd_udi_ingress.sat_interaction_fhir_screening_organization as sifso
join techbd_udi_ingress.sat_interaction_fhir_request as sifr   
 on
	sifso.hub_interaction_id = sifr.hub_interaction_id
where
	sifso.org_id = sifr.organization_id
group by
	sifso.qe_name,
	sifso.org_id
order by
	(created_at) desc;


/****************************************************************************************
 * This view, fhir_validation_issue_details, provides detailed insights into FHIR validation 
 * issues . It aggregates the data by validation engine, specific issue, IG (Implementation Guide) 
 * version, and issue date. 
 * The view includes the following key fields:
 * 
 * - validation_engine: The name of the validation engine that processed the interaction.
 * - issue: The specific validation issue encountered.
 * - issue_count: The number of times each issue was encountered within the given period.
 * - most_recent_date: The most recent timestamp when the issue was recorded.
 * - ig_version: The IG version associated with the issue, or 'Unknown' if not available.
 * - issue_date: The date (formatted as MM-DD-YYYY) when the issue occurred.
 * 
 * This view helps users analyze and understand the frequency and recency of validation 
 * issues over the past 7 days, allowing for more effective troubleshooting and resolution.
 * The results are ordered by the most recent occurrence of each issue.
****************************************************************************************/


DROP VIEW IF EXISTS techbd_udi_ingress.fhir_validation_issue_details CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_validation_issue_details
AS SELECT validation_engine,
    issue,
    severity as issue_severity,
    count(*) AS issue_count,
    max(date_time) AS most_recent_date,
    COALESCE(ig_version, 'Unknown'::text) AS ig_version,
    to_char(date_trunc('day'::text,	date_time),	'MM-DD-YYYY'::text) AS issue_date
      FROM techbd_udi_ingress.sat_interaction_fhir_validation_issue
   WHERE  
   date_time >= CURRENT_DATE - INTERVAL '2 days'
      AND (issue ~~ '%has not been checked because it is unknown%'::text 
            OR issue ~~ '%Unknown profile%'::text 
            OR issue ~~ '%Unknown extension%'::text 
            OR issue ~~ '%Unknown Code System%'::text 
            OR issue ~~ '%not found%'::text
            OR issue ~~ '%has not been checked because it could not be found%'::text
            OR issue ~~ '%Unable to find a match for profile%'::text
            OR issue ~~ '%None of the codings provided%'::text
            OR issue ~~ '%Unable to expand ValueSet%'::text
            OR issue ~~ '%Slicing cannot be evaluated%'::text
            OR issue ~~ '%could not be resolved%'::text)
            AND severity !=''
   GROUP BY validation_engine,
    issue, severity,
     (COALESCE(ig_version, 'Unknown'::text)), (to_char(date_trunc('day'::text, date_time), 'MM-DD-YYYY'::text))
   ORDER BY	(max(date_time)) DESC;


/****************************************************************************************
 * This view provides a straightforward way to access consolidated validation issues. 
 * It includes key fields related to FHIR validation issues, such as the validation engine, 
 * formatted issue date, most recent timestamp of the issue, IG (Implementation Guide) version, 
 * and the count of distinct issues. This view helps in quickly identifying and analyzing validation 
 * issues over the past 7 days, sorted by the most recent issue date.
****************************************************************************************/


DROP VIEW IF EXISTS techbd_udi_ingress.fhir_validation_issue CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_validation_issue
AS 
   SELECT
    validation_engine,
    MAX(date_time::date) AS issue_date,
    MAX(date_time) AS most_recent_date,
    COALESCE(ig_version, 'Unknown') AS ig_version,
    COUNT(DISTINCT issue) AS distinct_issue_count
FROM
    techbd_udi_ingress.sat_interaction_fhir_validation_issue
WHERE
    date_time >= CURRENT_DATE - INTERVAL '2 days'
    AND (
        issue LIKE '%has not been checked because it is unknown%'
        OR issue LIKE '%Unknown profile%'
        OR issue LIKE '%Unknown extension%'
        OR issue LIKE '%Unknown Code System%'
        OR issue LIKE '%not found%'
        OR issue LIKE '%has not been checked because it could not be found%'
        OR issue LIKE '%Unable to find a match for profile%'
        OR issue LIKE '%None of the codings provided%'
        OR issue LIKE '%Unable to expand ValueSet%'
        OR issue LIKE '%Slicing cannot be evaluated%'
        OR issue LIKE '%could not be resolved%'
    )
    AND severity !=''
GROUP BY
    validation_engine,
    COALESCE(ig_version, 'Unknown'),
    date_time::date
ORDER BY
    issue_date DESC;

