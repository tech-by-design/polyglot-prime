/****************************************************************************************
 * Comprehensive view of HTTP interactions and their associated requests.
 * 
 * This view joins the hub_interaction table with the sat_interaction_http_request table
 * to provide a detailed record of each interaction and its related HTTP requests.
 * 
 * Purpose:
 * - To offer a business-level overview of HTTP interactions processed by the system.
 * - Each request is typically represented by a single row. However, in scenarios where 
 *   completing a request involves multiple asynchronous HTTP requests, multiple rows 
 *   might be associated with a single interaction.
 * - This is particularly useful for understanding complex interactions that involve 
 *   several steps or dependent requests to fulfill a single client request.
 ****************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request AS
WITH cte_resource_types AS (
    SELECT sat_interaction_http_request_id, 
           string_agg(DISTINCT entry->'resource'->>'resourceType', ', ') AS resource_types
    FROM techbd_udi_ingress.sat_interaction_http_request,
         LATERAL jsonb_array_elements(payload->'entry') AS entry
    GROUP BY sat_interaction_http_request_id   
), cte_interaction_observe AS (
SELECT sihr.sat_interaction_http_request_id AS interaction_http_request_id,
    sihr.hub_interaction_id 				AS interaction_id,
    headers.start_time						AS start_time,
    headers.finish_time						AS finish_time,
    headers.duration_nanosecs 				AS duration_nanosecs,
    headers.duration_millisecs 				AS duration_millisecs
FROM 
    techbd_udi_ingress.sat_interaction_http_request sihr
JOIN LATERAL (
    SELECT
        MAX(CASE WHEN header->>'name' = 'X-Observability-Metric-Interaction-Start-Time' THEN header->>'value' END) AS start_time,
        MAX(CASE WHEN header->>'name' = 'X-Observability-Metric-Interaction-Finish-Time' THEN header->>'value' END) AS finish_time,
        MAX(CASE WHEN header->>'name' = 'X-Observability-Metric-Interaction-Duration-Nanosecs' THEN header->>'value' END) AS duration_nanosecs,
        MAX(CASE WHEN header->>'name' = 'X-Observability-Metric-Interaction-Duration-Millisecs' THEN header->>'value' END) AS duration_millisecs
    FROM jsonb_array_elements(sihr.payload->'response'->'headers') header
) headers ON true
WHERE 1 = 1
AND sihr.nature ->> 'nature' = 'org.techbd.service.http.Interactions$RequestResponseEncountered'
)
SELECT hi.hub_interaction_id AS interaction_id,
    hi.key AS uri,
    hi.created_at AS interaction_created_at,
    hi.created_by AS interaction_created_by,
    hi.provenance AS interaction_provenance,
    sihr.sat_interaction_http_request_id,
    sihr.nature ->> 'nature'::text AS nature,
    sihr.nature ->> 'tenant_id'::text AS tenant_id,           
    COALESCE((sihr.payload -> 'request'::text) ->> 'userAgent'::TEXT,sihr.nature ->> 'userAgent'::text) AS user_agent,        
    COALESCE((sihr.payload -> 'request'::text) ->> 'clientIpAddress'::TEXT, sihr.nature ->> 'clientIpAddress'::TEXT) AS client_ip_address,           
    sihr.content_type,
    sihr.payload,
    sihr.elaboration,
    sihr.from_state,
    sihr.to_state,
    sihr.state_transition_reason,
    sihr.created_at AS request_created_at,
    sihr.created_by AS request_created_by,
    sihr.provenance AS request_provenance,
    jsonb_array_length((((((sihr.payload -> 'response'::text) -> 'responseBody'::text) -> 'OperationOutcome'::text) -> 'validationResults'::text) -> 0) -> 'issues'::text) AS issues_count,
    rtyp.resource_types
    ,intr_observe.start_time
	,intr_observe.finish_time
	,intr_observe.duration_nanosecs
	,intr_observe.duration_millisecs
   FROM techbd_udi_ingress.hub_interaction hi
  	LEFT JOIN techbd_udi_ingress.sat_interaction_http_request sihr 
    ON hi.hub_interaction_id = sihr.hub_interaction_id
    LEFT OUTER JOIN cte_resource_types rtyp
   	ON rtyp.sat_interaction_http_request_id = sihr.sat_interaction_http_request_id
   	LEFT OUTER JOIN cte_interaction_observe intr_observe
   	ON intr_observe.interaction_id = sihr.hub_interaction_id
   ;

/*******************************************************************************************
 * Comprehensive view of HTTP interactions and their associated requests.
 * 
 * This view joins the hub_interaction table with the sat_interaction_http_request table
 * and pivots the child rows into columns (first_request, second_request, third_request), 
 * each containing a JSONB object with fields payload, elaboration, and created_at.
 * 
 * Purpose:
 * - To offer a business-level overview of HTTP interactions processed by the system.
 * - Each interaction typically involves a single HTTP request, but some interactions may
 *   involve multiple asynchronous HTTP requests. This view shows up to three requests
 *   per interaction.
 * - Useful for understanding complex interactions involving multiple steps or dependent
 *   requests to fulfill a single client request.
 * 
 * Note:
 * - If there are fewer than 3 sat_interaction_http_request rows for a hub_interaction,
 *   the resulting columns for the missing requests will be NULL.
 * - If there are more than 3 sat_interaction_http_request rows for a hub_interaction,
 *   only the first three requests (ordered by created_at) will be included in the view.
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request_multiple_3 CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request_multiple_3 AS
SELECT
    hi.hub_interaction_id AS interaction_id,
    hi.key AS uri,
    hi.created_at AS interaction_created_at,
    hi.created_by AS interaction_created_by,
    hi.provenance AS interaction_provenance,
    (SELECT jsonb_build_object(
        'nature', sihr.nature,
        'content_type', sihr.content_type,
        'payload', sihr.payload,
        'elaboration', sihr.elaboration,
        'from_state', sihr.from_state,
        'to_state', sihr.to_state,
        'state_transition_reason', sihr.state_transition_reason,
        'created_at', sihr.created_at
    )
    FROM techbd_udi_ingress.sat_interaction_http_request sihr
    WHERE sihr.hub_interaction_id = hi.hub_interaction_id
    ORDER BY sihr.created_at
    LIMIT 1 OFFSET 0) AS first_request,
    (SELECT jsonb_build_object(
        'nature', sihr.nature,
        'content_type', sihr.content_type,
        'payload', sihr.payload,
        'elaboration', sihr.elaboration,
        'from_state', sihr.from_state,
        'to_state', sihr.to_state,
        'state_transition_reason', sihr.state_transition_reason,
        'created_at', sihr.created_at
    )
    FROM techbd_udi_ingress.sat_interaction_http_request sihr
    WHERE sihr.hub_interaction_id = hi.hub_interaction_id
    ORDER BY sihr.created_at
    LIMIT 1 OFFSET 1) AS second_request,
    (SELECT jsonb_build_object(
        'nature', sihr.nature,
        'content_type', sihr.content_type,
        'payload', sihr.payload,
        'elaboration', sihr.elaboration,
        'from_state', sihr.from_state,
        'to_state', sihr.to_state,
        'state_transition_reason', sihr.state_transition_reason,
        'created_at', sihr.created_at
    )
    FROM techbd_udi_ingress.sat_interaction_http_request sihr
    WHERE sihr.hub_interaction_id = hi.hub_interaction_id
    ORDER BY sihr.created_at
    LIMIT 1 OFFSET 2) AS third_request
FROM
    techbd_udi_ingress.hub_interaction hi;


/*******************************************************************************************
This view is to facilitate the analysis and debugging of failed HTTP interactions. 
This can help in improving the overall reliability and performance of the system by 
addressing the root causes of these failures. The view captures important fields 
such as interaction and request metadata, client information, and state transitions, 
making it a comprehensive resource for monitoring and troubleshooting failed HTTP requests.
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request_failed CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request_failed AS 
WITH cte_resource_types AS (
    SELECT sat_interaction_http_request_id, 
           string_agg(DISTINCT entry->'resource'->>'resourceType', ', ') AS resource_types
    FROM techbd_udi_ingress.sat_interaction_http_request,
         LATERAL jsonb_array_elements(payload->'entry') AS entry
    GROUP BY sat_interaction_http_request_id   
)
SELECT hi.hub_interaction_id AS interaction_id,
    hi.key AS uri,
    hi.created_at AS interaction_created_at,
    hi.created_by AS interaction_created_by,
    hi.provenance AS interaction_provenance,
    sihr.sat_interaction_http_request_id,
    sihr.nature ->> 'nature'::text AS nature,
    sihr.nature ->> 'tenant_id'::text AS tenant_id,           
    COALESCE((sihr.payload -> 'request'::text) ->> 'userAgent'::TEXT,sihr.nature ->> 'userAgent'::text) AS user_agent,        
    COALESCE((sihr.payload -> 'request'::text) ->> 'clientIpAddress'::TEXT, sihr.nature ->> 'clientIpAddress'::TEXT) AS client_ip_address,           
    sihr.content_type,
    sihr.payload,
    sihr.elaboration,
    sihr.from_state,
    sihr.to_state,
    sihr.state_transition_reason,
    sihr.created_at AS request_created_at,
    sihr.created_by AS request_created_by,
    sihr.provenance AS request_provenance,
    rtyp.resource_types
   FROM techbd_udi_ingress.hub_interaction hi
   	LEFT JOIN techbd_udi_ingress.sat_interaction_http_request sihr 
    ON hi.hub_interaction_id = sihr.hub_interaction_id
	LEFT OUTER JOIN cte_resource_types rtyp
	ON rtyp.sat_interaction_http_request_id = sihr.sat_interaction_http_request_id
    WHERE upper(sihr.to_state) = 'FAIL'
   ;

/*******************************************************************************************
  This view combines data from interaction_http_request_multiple_3 and interaction_http_request_failed
  to provide a consolidated view of failed HTTP requests and associated interactions.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request_forward_fail CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request_forward_fail
AS 
WITH cte_resource_type AS (
    SELECT  interaction_id, 
        string_agg(DISTINCT entry->'resource'->>'resourceType', ', ') AS resource_types
    FROM techbd_udi_ingress.interaction_http_request,
        LATERAL jsonb_array_elements(payload->'entry') AS entry
    WHERE upper(nature::text) = 'ORIGINAL FHIR PAYLOAD'
    GROUP BY interaction_id
), cte_interaction AS (
    SELECT intr_multi.interaction_id,
       hreq_failed.tenant_id,
       intr_multi.uri,
       hreq_failed.nature,
       intr_multi.interaction_created_at,
       intr_multi.interaction_created_by,
       intr_multi.interaction_provenance,
       intr_multi.first_request,
       intr_multi.second_request,
       intr_multi.third_request,
       COALESCE(((intr_multi.first_request -> 'payload'::text) -> 'request'::text) ->> 'clientIpAddress'::text, hreq_failed.client_ip_address) AS client_ip_address,
       COALESCE(((intr_multi.first_request -> 'payload'::text) -> 'request'::text) ->> 'userAgent'::text, hreq_failed.user_agent) AS user_agent,
       COALESCE(intr_multi.first_request ->> 'from_state'::text, hreq_failed.from_state) AS from_state,
       COALESCE(intr_multi.first_request ->> 'to_state'::text, hreq_failed.to_state) AS to_state,
       "substring"(((((intr_multi.first_request -> 'payload'::text) -> 'response'::text) -> 'responseBody'::text) -> 'OperationOutcome'::text) ->> 'outboundHttpMessage'::text, 'POST[^\n]+'::text) AS outbound_http_message,
       (intr_multi.third_request -> 'payload'::text) ->> 'error'::text AS full_error_message,
        SUBSTRING((hreq_failed.payload ->> 'error') FROM POSITION(':' IN (hreq_failed.payload ->> 'error')) + 2) AS error_text,
        jsonb_array_length(
		(intr_multi.first_request -> 'payload'::text) -> 'response'::text -> 'responseBody'::text -> 'OperationOutcome'::text -> 'validationResults'::text -> 0 -> 'issues'
  		) AS issues_count,
  		crt.resource_types
      	FROM techbd_udi_ingress.interaction_http_request_multiple_3 intr_multi
      	INNER JOIN techbd_udi_ingress.interaction_http_request_failed hreq_failed 
      	ON hreq_failed.interaction_id = intr_multi.interaction_id
      	LEFT OUTER JOIN cte_resource_type crt 
        ON crt.interaction_id = intr_multi.interaction_id
   		)
SELECT intr_hreq.interaction_id AS interaction_id,
   intr_hreq.tenant_id AS tenant_id,
   intr_hreq.uri AS uri,
   intr_hreq.nature AS nature,
   intr_hreq.interaction_created_at AS interaction_created_at,
   intr_hreq.interaction_created_by AS interaction_created_by,
   intr_hreq.interaction_provenance AS interaction_provenance,
   intr_hreq.first_request AS first_request,
   intr_hreq.second_request AS second_request,
   intr_hreq.third_request AS third_request,
   intr_hreq.client_ip_address AS client_ip_address,
   intr_hreq.user_agent AS user_agent,
   intr_hreq.from_state AS from_state,
   intr_hreq.to_state AS to_state,
   intr_hreq.outbound_http_message AS outbound_http_message,
   intr_hreq.error_text AS error,
   intr_hreq.issues_count,
   intr_hreq.resource_types
  FROM cte_interaction AS intr_hreq
 ;

/*******************************************************************************************
The view techbd_udi_ingress.interaction_diagnostics retrieves diagnostic information from 
the techbd_udi_ingress.interaction_http_request_forward_fail object, extracting relevant fields 
such as bundleSessionId, validation_engine, and various details about issues encountered 
during interactions. It utilizes Common Table Expressions (CTEs) to structure the query, 
extracting data from nested JSON structures.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_diagnostics CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_diagnostics
AS WITH cte_interaction_issues AS(
SELECT 
	fwd_fail.interaction_id,
	fwd_fail.tenant_id,
	fwd_fail.uri,
	fwd_fail.interaction_created_at,
	fwd_fail.interaction_created_by,
	fwd_fail.interaction_provenance,
	fwd_fail.client_ip_address,
	fwd_fail.user_agent,
	fwd_fail.from_state,
	fwd_fail.to_state,
	fwd_fail.first_request -> 'payload' -> 'response' -> 'responseBody' -> 'OperationOutcome' ->> 'bundleSessionId' AS bundleSessionId,
	validation_results -> 'observability' ->> 'name' AS validation_engine,
	issue ->> 'message' AS issue_message,
	issue -> 'location' ->> 'line' AS issue_line,
	issue -> 'location' ->> 'column' AS issue_column,
	issue -> 'location' ->> 'diagnostics' AS issue_diagnostics,
	issue ->> 'severity' AS issue_type
FROM
	techbd_udi_ingress.interaction_http_request_forward_fail fwd_fail,
	jsonb_array_elements(first_request #> '{payload,response,responseBody,OperationOutcome,validationResults}') AS validation_results,
	jsonb_array_elements(validation_results -> 'issues') AS issue
   )
SELECT
	intr_issue.interaction_id,
	intr_issue.tenant_id,
	intr_issue.uri,
	intr_issue.interaction_created_at,
	intr_issue.interaction_created_by,
	intr_issue.interaction_provenance,
	intr_issue.client_ip_address,
	intr_issue.user_agent,
	intr_issue.from_state,
	intr_issue.to_state,
	intr_issue.bundleSessionId,
	intr_issue.validation_engine,
	intr_issue.issue_message,
	intr_issue.issue_line,
	intr_issue.issue_column,
	intr_issue.issue_diagnostics,
	intr_issue.issue_type
FROM
	cte_interaction_issues intr_issue
  ;

/*******************************************************************************************
This view combines data from hub_interaction and sat_interaction_http_request tables to 
provide a consolidated view of HTTP FHIR requests, including resource types, 
interaction details, request attributes, and validation issues.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_fhir_request CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_fhir_request
AS WITH cte_resource_types AS (
         SELECT sat_interaction_http_request.sat_interaction_http_request_id,
            string_agg(DISTINCT (entry.value -> 'resource'::text) ->> 'resourceType'::text, ', '::text) AS resource_types
           FROM techbd_udi_ingress.sat_interaction_http_request,
            LATERAL jsonb_array_elements(sat_interaction_http_request.payload -> 'entry'::text) entry(value)
          GROUP BY sat_interaction_http_request.sat_interaction_http_request_id
        )
 SELECT hi.hub_interaction_id AS interaction_id,
    hi.key AS uri,
    hi.created_at AS interaction_created_at,
    hi.created_by AS interaction_created_by,
    hi.provenance AS interaction_provenance,
    sihr.sat_interaction_http_request_id,
    sihr.nature ->> 'nature'::text AS nature,
    sihr.nature ->> 'tenant_id'::text AS tenant_id,
    COALESCE((sihr.payload -> 'request'::text) ->> 'userAgent'::text, sihr.nature ->> 'userAgent'::text) AS user_agent,
    COALESCE((sihr.payload -> 'request'::text) ->> 'clientIpAddress'::text, sihr.nature ->> 'clientIpAddress'::text) AS client_ip_address,
    sihr.content_type,
    sihr.payload,
    sihr.elaboration,
    sihr.from_state,
    sihr.to_state,
    sihr.state_transition_reason,
    sihr.created_at AS request_created_at,
    sihr.created_by AS request_created_by,
    sihr.provenance AS request_provenance,
    jsonb_array_length((((((sihr.payload -> 'response'::text) -> 'responseBody'::text) -> 'OperationOutcome'::text) -> 'validationResults'::text) -> 0) -> 'issues'::text) AS issues_count,
    rtyp.resource_types
   FROM techbd_udi_ingress.hub_interaction hi
     LEFT JOIN techbd_udi_ingress.sat_interaction_http_request sihr ON hi.hub_interaction_id = sihr.hub_interaction_id
     LEFT JOIN cte_resource_types rtyp ON rtyp.sat_interaction_http_request_id = sihr.sat_interaction_http_request_id
     WHERE hi.key IN('/Bundle','/Bundle/$validate')
    ;

/*******************************************************************************************
This view is to extract observability metrics from HTTP request interactions.This view joins 
data from sat_interaction_http_request with JSONB headers to retrieve specific observability 
metrics. Metrics extracted include start time, finish time, duration in nanoseconds, and 
duration in milliseconds. To optimize the query, use a LATERAL join to extract the JSONB 
values more efficiently. This approach avoids multiple jsonb_array_elements function calls 
for each row and reduces repeated scanning of the JSONB arrays.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_observe CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_observe
AS WITH cte_interaction_observe AS (
     SELECT sihr.sat_interaction_http_request_id AS interaction_http_request_id,
        sihr.hub_interaction_id AS interaction_id,
        headers.start_time,
        headers.finish_time,
        headers.duration_nanosecs,
        headers.duration_millisecs,
        sihr.payload->'request'::TEXT ->> 'requestUri'::TEXT AS uri
       FROM techbd_udi_ingress.sat_interaction_http_request sihr
         JOIN LATERAL ( SELECT max(
                    CASE
                        WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Start-Time'::text THEN header.value ->> 'value'::text
                        ELSE NULL::text
                    END) AS start_time,
                max(
                    CASE
                        WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Finish-Time'::text THEN header.value ->> 'value'::text
                        ELSE NULL::text
                    END) AS finish_time,
                max(
                    CASE
                        WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Duration-Nanosecs'::text THEN header.value ->> 'value'::text
                        ELSE NULL::text
                    END) AS duration_nanosecs,
                max(
                    CASE
                        WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Duration-Millisecs'::text THEN header.value ->> 'value'::text
                        ELSE NULL::text
                    END) AS duration_millisecs
               FROM jsonb_array_elements((sihr.payload -> 'response'::text) -> 'headers'::text) header(value)) headers ON true
      WHERE 1 = 1 AND (sihr.nature ->> 'nature'::text) = 'org.techbd.service.http.Interactions$RequestResponseEncountered'::text
    )
	SELECT 
	intr_observe.interaction_id,
	intr_observe.uri,
	intr_observe.start_time,
	intr_observe.finish_time,
	intr_observe.duration_nanosecs,
	intr_observe.duration_millisecs,
	intr_observe.interaction_http_request_id
	FROM cte_interaction_observe intr_observe  
		WHERE intr_observe.start_time IS NOT NULL 
		AND intr_observe.finish_time IS NOT NULL 
		AND intr_observe.duration_nanosecs IS NOT NULL 
		AND intr_observe.duration_millisecs IS NOT NULL
		ORDER BY intr_observe.duration_millisecs desc
		;

/*******************************************************************************************
This view extracts diagnostic information from JSON payloads of HTTP requests stored in 
'sat_interaction_http_request'. It transforms and presents fields such as 'tenant_id', 'uri', 
'session_id', 'severity', 'message', 'line', 'column', 'diagnostics', 'encounteredAt', 
and 'elaboration' for further analysis or reporting.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_session_diagnostics CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_session_diagnostics AS
WITH cte_interaction_diagnostics As(
SELECT	
    intr_hreq.payload->'request'->'tenant'->>'tenantId' AS tenant_id,
    intr_hreq.payload->'request'::TEXT ->> 'requestUri'::TEXT AS uri,
    intr_hreq.hub_interaction_id AS session_id,
    issue->>'severity' AS severity,
    issue->>'message' AS message,
    issue->'location'->>'line' AS line,
    issue->'location'->>'column' AS "column",
    issue->'location'->>'diagnostics' AS "diagnostics",
    intr_hreq.payload->'response'->>'encounteredAt'::text AS encounteredAt,
    intr_hreq.elaboration AS elaboration
FROM techbd_udi_ingress.sat_interaction_http_request intr_hreq,
LATERAL jsonb_array_elements(intr_hreq.payload->'response'->'responseBody'->'OperationOutcome'->'validationResults') AS validationResult,
LATERAL jsonb_array_elements(validationResult->'issues') AS issue
)
SELECT
intr_diagno.tenant_id,
intr_diagno.uri,
intr_diagno.session_id,
intr_diagno.severity,
intr_diagno.message,
intr_diagno.line,
intr_diagno."column",
intr_diagno."diagnostics",
intr_diagno.encounteredAt,
intr_diagno.elaboration
FROM cte_interaction_diagnostics intr_diagno
;

/*******************************************************************************************************************************
 * Procedure to register an HTTP interaction, handling potential unique constraint violations
 * and logging exceptions when necessary.
 *
 * @param interaction_id TEXT - The unique ID for the interaction.
 * @param interaction_key TEXT - A key to identify the interaction.
 * @param payload JSONB - The JSON payload associated with the interaction.
 * @param elaboration JSONB (nullable) - Additional JSON data elaborating the interaction. Default is NULL.
 * @param nature JSONB (nullable) - The nature of the HTTP interaction (including tenant, etc.).
 * @param content_type TEXT (nullable) - The content type of the HTTP interaction.
 * @param from_state TEXT (nullable) - The initial state before the HTTP interaction.
 * @param to_state TEXT (nullable) - The state after the HTTP interaction.
 * @param state_transition_reason TEXT (nullable) - The reason for the state transition.
 * @param created_at TIMESTAMPTZ (nullable) - The creation timestamp of the record. Defaults to the current timestamp if NULL.
 * @param created_by TEXT (nullable) - The user who created the record. Defaults to the current user if NULL.
 * @param provenance TEXT (nullable) - The provenance of the record. Defaults to 'unknown' if NULL.
 * @param hub_upsert_behavior BOOLEAN - Flag to control behavior on unique constraint violation. Default is TRUE.
 *                                      If TRUE, unique violation is not treated as an error.
 *                                      If FALSE, unique violation is treated as an error.
 *******************************************************************************************************************************/
CREATE OR REPLACE PROCEDURE techbd_udi_ingress.register_interaction_http_request(
    IN interaction_id TEXT,
    IN interaction_key TEXT,
    IN payload JSONB,
    IN elaboration JSONB DEFAULT NULL,
    IN nature JSONB DEFAULT NULL,
    IN content_type TEXT DEFAULT NULL,
    IN from_state TEXT DEFAULT NULL,
    IN to_state TEXT DEFAULT NULL,
    IN state_transition_reason TEXT DEFAULT NULL,
    IN created_at TIMESTAMPTZ DEFAULT NULL,
    IN created_by TEXT DEFAULT NULL,
    IN provenance TEXT DEFAULT NULL,
    IN hub_upsert_behavior BOOLEAN DEFAULT TRUE
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_error_msg TEXT;
    v_sqlstate TEXT;
    v_pg_detail TEXT;
    v_pg_hint TEXT;
    v_pg_context TEXT;
    v_created_at TIMESTAMPTZ := COALESCE(created_at, CURRENT_TIMESTAMP);
    v_created_by TEXT := COALESCE(created_by, current_user);
    v_provenance TEXT := COALESCE(provenance, 'unknown');
    v_exception_id TEXT;
BEGIN
    -- Attempt to insert into hub_interaction
    BEGIN
        INSERT INTO techbd_udi_ingress.hub_interaction (hub_interaction_id, key, created_at, created_by, provenance)
        VALUES (interaction_id, interaction_key, v_created_at, v_created_by, v_provenance);

    EXCEPTION
        WHEN unique_violation THEN
            IF NOT hub_upsert_behavior THEN
                -- Capture exception details
                GET STACKED DIAGNOSTICS
                    v_error_msg = MESSAGE_TEXT,
                    v_sqlstate = RETURNED_SQLSTATE,
                    v_pg_detail = PG_EXCEPTION_DETAIL,
                    v_pg_hint = PG_EXCEPTION_HINT,
                    v_pg_context = PG_EXCEPTION_CONTEXT;

                -- Call register_issue to log the exception and get the exception ID
                v_exception_id := techbd_udi_ingress.register_issue(
                    NULL, interaction_key, v_error_msg, v_sqlstate, v_pg_detail, v_pg_hint, v_pg_context, v_created_by, v_provenance
                );
            END IF;
    END;

    -- Attempt to insert into sat_interaction_http_request
    BEGIN
        INSERT INTO techbd_udi_ingress.sat_interaction_http_request (
            sat_interaction_http_request_id, hub_interaction_id, nature, content_type, payload, from_state, to_state, state_transition_reason, elaboration, created_at, created_by, provenance
        )
        VALUES (
            gen_random_uuid()::text, interaction_id, nature, content_type, payload, from_state, to_state, state_transition_reason, elaboration, v_created_at, v_created_by, v_provenance
        );

    EXCEPTION
        WHEN OTHERS THEN
            -- Capture exception details
            GET STACKED DIAGNOSTICS
                v_error_msg = MESSAGE_TEXT,
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_detail = PG_EXCEPTION_DETAIL,
                v_pg_hint = PG_EXCEPTION_HINT,
                v_pg_context = PG_EXCEPTION_CONTEXT;

            -- Log the exception, reusing the previous exception ID if it exists
            v_exception_id := techbd_udi_ingress.register_issue(
                COALESCE(v_exception_id, NULL), interaction_key, v_error_msg, v_sqlstate, v_pg_detail, v_pg_hint, v_pg_context, v_created_by, v_provenance
            );
    END;
END;
$$;

/*******************************************************************************************
 * Comprehensive view of Orchctl issue classification. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.orch_session_issue_classification CASCADE;
CREATE OR REPLACE
VIEW techbd_udi_ingress.orch_session_issue_classification as
WITH cte_business_rule AS (
SELECT
	worksheet AS worksheet,
	field AS field,
	required AS required,
	"Resolved by QE/QCS" AS resolved_by_qe_qcs,
	CONCAT(
          case
		when UPPER("True Rejection") = 'YES' then 'REJECTION'
		else ''
	end,
	case
		when UPPER("Warning Layer") = 'YES' then 'WARNING'
		else ''
	end
      ) AS record_action
FROM
	techbd_orch_ctl.business_rules
GROUP BY
	worksheet,
	field,
	required,
	resolved_by_qe_qcs,
	record_action
)
SELECT
	DISTINCT ON
	(isi.orch_session_issue_id) 
  isi.*,
	CASE
		WHEN
        UPPER(isi.issue_type) = 'MISSING COLUMN'
      THEN
        'STRUCTURAL ISSUE'
		ELSE
        br.record_action
	END
  AS disposition,
	CASE
		WHEN UPPER(br.resolved_by_qe_qcs) = 'YES' THEN 'Resolved By QE/QCS'
		ELSE null
	END AS remediation2
FROM
	techbd_orch_ctl.orch_session_issue AS isi
LEFT JOIN cte_business_rule br ON
	br.field = isi.issue_column
WHERE
	isi.orch_session_issue_id is not null
;

/*******************************************************************************************
 * Comprehensive view of SFTP interactions and their associated requests. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_sftp CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_sftp AS 
WITH issue_count AS (
SELECT
	osi.session_id,
	count(osi.orch_session_issue_id) AS issue_count
FROM
	techbd_udi_ingress.orch_session_issue_classification osi
GROUP BY
	osi.session_id
),
rejection_count AS (
SELECT
	osi.session_id,
	count(osi.orch_session_issue_id) AS rejection_count
FROM
	techbd_udi_ingress.orch_session_issue_classification osi
WHERE 
		osi.disposition = 'REJECTION'
GROUP BY
	osi.session_id
),
warning_count AS (
SELECT
	osi.session_id,
	count(osi.orch_session_issue_id) AS warning_count
FROM
	techbd_udi_ingress.orch_session_issue_classification osi
WHERE 
		osi.disposition = 'WARNING'
GROUP BY
	osi.session_id
)
SELECT
	"substring"(ose.ingest_src::text,
	'/SFTP/([^/]+)/'::text) AS qe,
	os.orch_started_at AS request_time,
	ose.session_id,
	os."version",
	count(ose.ingest_src) AS ingress_count,
	count(ose.ingest_src) AS consumed_count,
	coalesce(ic.issue_count,
	0) AS issue_count,
	coalesce(rc.rejection_count,
	0) AS rejection_count,
	coalesce(wc.warning_count,
	0) AS warning_count
FROM
	techbd_orch_ctl.orch_session_entry ose
JOIN techbd_orch_ctl.orch_session os ON
	ose.session_id = os.orch_session_id
LEFT JOIN issue_count ic ON
	ose.session_id = ic.session_id
LEFT JOIN rejection_count rc ON
	ose.session_id = rc.session_id
LEFT JOIN warning_count wc ON
	ose.session_id = wc.session_id
WHERE
	"substring"(ose.ingest_src::text,
	'/SFTP/([^/]+)/'::text) is not null
GROUP BY
	ose.session_id,
	qe,
	os."version",
	os.orch_started_at,
	ic.issue_count,
	rc.rejection_count,
	wc.warning_count;

