/*******************************************************************************************
This view aggregates data from two tables: 'hub_interaction' and 'sat_interaction_http_request'.
The view includes various fields related to interactions and HTTP requests, extracting relevant 
details from JSON fields and providing computed columns.
******************************************************************************************/
CREATE MATERIALIZED VIEW IF NOT EXISTS techbd_udi_ingress.interaction_http_request_mat AS
SELECT hi.hub_interaction_id AS hub_interaction_id,
	sihr.sat_interaction_http_request_id,
    hi.key AS uri,
    hi.created_at AS interaction_created_at,
    hi.created_by AS interaction_created_by,
    hi.provenance AS interaction_provenance,
    sihr.nature ->> 'nature'::text AS nature,
    sihr.nature ->> 'tenant_id'::text AS tenant_id,
    COALESCE((sihr.payload -> 'request'::text) ->> 'userAgent'::text, sihr.nature ->> 'userAgent'::text) AS user_agent,
    COALESCE((sihr.payload -> 'request'::text) ->> 'clientIpAddress'::text, sihr.nature ->> 'clientIpAddress'::text) AS client_ip_address,
    sihr.content_type,
    sihr.elaboration,
    sihr.from_state,
    sihr.to_state,
    sihr.state_transition_reason,
    sihr.created_at AS request_created_at,
    sihr.created_by AS request_created_by,
    sihr.provenance AS request_provenance,
    jsonb_array_length((((((sihr.payload -> 'response'::text) -> 'responseBody'::text) -> 'OperationOutcome'::text) -> 'validationResults'::text) -> 0) -> 'issues'::text) AS issues_count,
    sihr.payload
   	FROM techbd_udi_ingress.hub_interaction hi
   	INNER JOIN techbd_udi_ingress.sat_interaction_http_request sihr 
   	ON hi.hub_interaction_id = sihr.hub_interaction_id
   	WITH DATA;
  
   
/*******************************************************************************************
This view aggregates resource types from HTTP request payloads associated with interactions 
that match specific criteria.
******************************************************************************************/
  CREATE MATERIALIZED VIEW IF NOT EXISTS techbd_udi_ingress.interaction_http_request_resource_type_mat AS
  SELECT 
  sihr.sat_interaction_http_request_id,
  sihr.hub_interaction_id,  
  string_agg(DISTINCT (entry.value -> 'resource'::text) ->> 'resourceType'::text, ', '::text) AS resource_types
  FROM 
  techbd_udi_ingress.hub_interaction hintr
  JOIN techbd_udi_ingress.sat_interaction_http_request sihr
  ON hintr.hub_interaction_id = sihr.hub_interaction_id,
  LATERAL jsonb_array_elements(sihr.payload -> 'entry') entry(value)
  WHERE 
  hintr.key LIKE '/Bundle%'
  AND sihr.nature ->> 'nature' = 'Original FHIR Payload'
  GROUP BY 
  sihr.sat_interaction_http_request_id,
  sihr.hub_interaction_id
  WITH DATA;

/*******************************************************************************************
This view extracts and computes observability metrics related to HTTP requests and their 
interactions.
******************************************************************************************/
CREATE MATERIALIZED VIEW IF NOT EXISTS techbd_udi_ingress.interaction_http_request_observe_mat AS
SELECT sihr.sat_interaction_http_request_id AS sat_interaction_http_request_id,
sihr.hub_interaction_id AS hub_interaction_id,
headers.start_time,
headers.finish_time,
EXTRACT(epoch FROM headers.finish_time::timestamp without time zone - headers.start_time::timestamp without time zone) * 1000::numeric AS duration_millisecs,
(sihr.payload -> 'request'::text) ->> 'requestUri'::text AS uri
   FROM techbd_udi_ingress.sat_interaction_http_request sihr
     JOIN LATERAL ( SELECT max(
                CASE
                    WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Start-Time'::text THEN header.value ->> 'value'::text
                ELSE NULL::text
            END) AS start_time,
        max(
            CASE
                WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Finish-Time'::text THEN header.value ->> 'value'::text
                ELSE NULL::text
            END) AS finish_time
       FROM jsonb_array_elements((sihr.payload -> 'response'::text) -> 'headers'::text) header(value)) headers ON true
 WHERE 1 = 1 
 AND (sihr.nature ->> 'nature'::text) = 'org.techbd.service.http.Interactions$RequestResponseEncountered'::TEXT
 WITH DATA;
 
/****************************************************************************************
 * Comprehensive view of HTTP interactions and their associated requests.
 * 
 * This view joins the hub_interaction table with the sat_interaction_http_request table
 * to provide a detailed record of each interaction and its related HTTP requests.
 * 
 * Purpose:
 * - To offer a business-level overview of HTTP interactions processed by the system.
 * - Each request is typically represented by a single row. However, in scenarios where 
 *   completing a request involves multiple asynchronous HTTP requests, multiple rows 
 *   might be associated with a single interaction.
 * - This is particularly useful for understanding complex interactions that involve 
 *   several steps or dependent requests to fulfill a single client request.
 ****************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request
AS 
SELECT htt_req.hub_interaction_id AS interaction_id,
    htt_req.uri,
    htt_req.interaction_created_at AS interaction_created_at,
    htt_req.interaction_created_by AS interaction_created_by,
    htt_req.interaction_provenance AS interaction_provenance,
    htt_req.sat_interaction_http_request_id,
    htt_req.nature,
    htt_req.tenant_id,
    htt_req.user_agent,
    htt_req.client_ip_address,
    htt_req.content_type,
    htt_req.payload,
    htt_req.elaboration,
    htt_req.from_state,
    htt_req.to_state,
    htt_req.state_transition_reason,
    htt_req.request_created_at,
    htt_req.request_created_by,
    htt_req.request_provenance,
    htt_req.issues_count,
    rtyp.resource_types,
    intr_observe.start_time,
    intr_observe.finish_time,
    intr_observe.duration_millisecs
   FROM techbd_udi_ingress.interaction_http_request_mat htt_req
   LEFT OUTER JOIN techbd_udi_ingress.interaction_http_request_resource_type_mat rtyp  
   ON rtyp.sat_interaction_http_request_id = htt_req.sat_interaction_http_request_id
   AND rtyp.hub_interaction_id  = htt_req.hub_interaction_id
   LEFT OUTER JOIN techbd_udi_ingress.interaction_http_request_observe_mat intr_observe
   ON intr_observe.sat_interaction_http_request_id = htt_req.sat_interaction_http_request_id
   AND intr_observe.hub_interaction_id  = htt_req.hub_interaction_id 
   ;
/*******************************************************************************************
 * Comprehensive view of HTTP interactions and their associated requests.
 * 
 * This view joins the hub_interaction table with the sat_interaction_http_request table
 * and pivots the child rows into columns (first_request, second_request, third_request), 
 * each containing a JSONB object with fields payload, elaboration, and created_at.
 * 
 * Purpose:
 * - To offer a business-level overview of HTTP interactions processed by the system.
 * - Each interaction typically involves a single HTTP request, but some interactions may
 *   involve multiple asynchronous HTTP requests. This view shows up to three requests
 *   per interaction.
 * - Useful for understanding complex interactions involving multiple steps or dependent
 *   requests to fulfill a single client request.
 * 
 * Note:
 * - If there are fewer than 3 sat_interaction_http_request rows for a hub_interaction,
 *   the resulting columns for the missing requests will be NULL.
 * - If there are more than 3 sat_interaction_http_request rows for a hub_interaction,
 *   only the first three requests (ordered by created_at) will be included in the view.
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request_multiple_3 CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request_multiple_3 AS
SELECT
    hi.hub_interaction_id AS interaction_id,
    hi.key AS uri,
    hi.created_at AS interaction_created_at,
    hi.created_by AS interaction_created_by,
    hi.provenance AS interaction_provenance,
    (SELECT jsonb_build_object(
        'nature', sihr.nature,
        'content_type', sihr.content_type,
        'payload', sihr.payload,
        'elaboration', sihr.elaboration,
        'from_state', sihr.from_state,
        'to_state', sihr.to_state,
        'state_transition_reason', sihr.state_transition_reason,
        'created_at', sihr.created_at
    )
    FROM techbd_udi_ingress.sat_interaction_http_request sihr
    WHERE sihr.hub_interaction_id = hi.hub_interaction_id
    ORDER BY sihr.created_at
    LIMIT 1 OFFSET 0) AS first_request,
    (SELECT jsonb_build_object(
        'nature', sihr.nature,
        'content_type', sihr.content_type,
        'payload', sihr.payload,
        'elaboration', sihr.elaboration,
        'from_state', sihr.from_state,
        'to_state', sihr.to_state,
        'state_transition_reason', sihr.state_transition_reason,
        'created_at', sihr.created_at
    )
    FROM techbd_udi_ingress.sat_interaction_http_request sihr
    WHERE sihr.hub_interaction_id = hi.hub_interaction_id
    ORDER BY sihr.created_at
    LIMIT 1 OFFSET 1) AS second_request,
    (SELECT jsonb_build_object(
        'nature', sihr.nature,
        'content_type', sihr.content_type,
        'payload', sihr.payload,
        'elaboration', sihr.elaboration,
        'from_state', sihr.from_state,
        'to_state', sihr.to_state,
        'state_transition_reason', sihr.state_transition_reason,
        'created_at', sihr.created_at
    )
    FROM techbd_udi_ingress.sat_interaction_http_request sihr
    WHERE sihr.hub_interaction_id = hi.hub_interaction_id
    ORDER BY sihr.created_at
    LIMIT 1 OFFSET 2) AS third_request
FROM
    techbd_udi_ingress.hub_interaction hi;


/*******************************************************************************************
This view is to facilitate the analysis and debugging of failed HTTP interactions. 
This can help in improving the overall reliability and performance of the system by 
addressing the root causes of these failures. The view captures important fields 
such as interaction and request metadata, client information, and state transitions, 
making it a comprehensive resource for monitoring and troubleshooting failed HTTP requests.
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request_failed CASCADE;  
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request_failed
AS SELECT htt_req.hub_interaction_id AS interaction_id,
    htt_req.uri,
    htt_req.interaction_created_at AS interaction_created_at,
    htt_req.interaction_created_by AS interaction_created_by,
    htt_req.interaction_provenance AS interaction_provenance,
    htt_req.sat_interaction_http_request_id,
    htt_req.nature,
    htt_req.tenant_id,
    htt_req.user_agent,
    htt_req.client_ip_address,
    htt_req.content_type,
    htt_req.payload,
    htt_req.elaboration,
    htt_req.from_state,
    htt_req.to_state,
    htt_req.state_transition_reason,
    htt_req.request_created_at,
    htt_req.request_created_by,
    htt_req.request_provenance,
    htt_req.issues_count,
    rtyp.resource_types,
    intr_observe.start_time,
    intr_observe.finish_time,
    intr_observe.duration_millisecs
   FROM techbd_udi_ingress.interaction_http_request_mat htt_req
   LEFT OUTER JOIN techbd_udi_ingress.interaction_http_request_resource_type_mat rtyp  
   ON rtyp.sat_interaction_http_request_id = htt_req.sat_interaction_http_request_id
   AND rtyp.hub_interaction_id  = htt_req.hub_interaction_id
   LEFT OUTER JOIN techbd_udi_ingress.interaction_http_request_observe_mat intr_observe
   ON intr_observe.sat_interaction_http_request_id = htt_req.sat_interaction_http_request_id
   AND intr_observe.hub_interaction_id  = htt_req.hub_interaction_id 
   WHERE upper(htt_req.to_state) = 'FAIL'::text;

/*******************************************************************************************
  This view combines data from interaction_http_request_multiple_3 and interaction_http_request_failed
  to provide a consolidated view of failed HTTP requests and associated interactions.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_request_forward_fail CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_request_forward_fail
AS 
WITH cte_resource_type AS (
    SELECT  interaction_id, 
        string_agg(DISTINCT entry->'resource'->>'resourceType', ', ') AS resource_types
    FROM techbd_udi_ingress.interaction_http_request,
        LATERAL jsonb_array_elements(payload->'entry') AS entry
    WHERE upper(nature::text) = 'ORIGINAL FHIR PAYLOAD'
    GROUP BY interaction_id
), cte_interaction AS (
    SELECT intr_multi.interaction_id,
       hreq_failed.tenant_id,
       intr_multi.uri,
       hreq_failed.nature,
       intr_multi.interaction_created_at,
       intr_multi.interaction_created_by,
       intr_multi.interaction_provenance,
       intr_multi.first_request,
       intr_multi.second_request,
       intr_multi.third_request,
       COALESCE(((intr_multi.first_request -> 'payload'::text) -> 'request'::text) ->> 'clientIpAddress'::text, hreq_failed.client_ip_address) AS client_ip_address,
       COALESCE(((intr_multi.first_request -> 'payload'::text) -> 'request'::text) ->> 'userAgent'::text, hreq_failed.user_agent) AS user_agent,
       COALESCE(intr_multi.first_request ->> 'from_state'::text, hreq_failed.from_state) AS from_state,
       COALESCE(intr_multi.first_request ->> 'to_state'::text, hreq_failed.to_state) AS to_state,
       "substring"(((((intr_multi.first_request -> 'payload'::text) -> 'response'::text) -> 'responseBody'::text) -> 'OperationOutcome'::text) ->> 'outboundHttpMessage'::text, 'POST[^\n]+'::text) AS outbound_http_message,
       (intr_multi.third_request -> 'payload'::text) ->> 'error'::text AS full_error_message,
        SUBSTRING((hreq_failed.payload ->> 'error') FROM POSITION(':' IN (hreq_failed.payload ->> 'error')) + 2) AS error_text,
        jsonb_array_length(
		(intr_multi.first_request -> 'payload'::text) -> 'response'::text -> 'responseBody'::text -> 'OperationOutcome'::text -> 'validationResults'::text -> 0 -> 'issues'
  		) AS issues_count,
  		crt.resource_types
      	FROM techbd_udi_ingress.interaction_http_request_multiple_3 intr_multi
      	INNER JOIN techbd_udi_ingress.interaction_http_request_failed hreq_failed 
      	ON hreq_failed.interaction_id = intr_multi.interaction_id
      	LEFT OUTER JOIN cte_resource_type crt 
        ON crt.interaction_id = intr_multi.interaction_id
   		)
SELECT intr_hreq.interaction_id AS interaction_id,
   intr_hreq.tenant_id AS tenant_id,
   intr_hreq.uri AS uri,
   intr_hreq.nature AS nature,
   intr_hreq.interaction_created_at AS interaction_created_at,
   intr_hreq.interaction_created_by AS interaction_created_by,
   intr_hreq.interaction_provenance AS interaction_provenance,
   intr_hreq.first_request AS first_request,
   intr_hreq.second_request AS second_request,
   intr_hreq.third_request AS third_request,
   intr_hreq.client_ip_address AS client_ip_address,
   intr_hreq.user_agent AS user_agent,
   intr_hreq.from_state AS from_state,
   intr_hreq.to_state AS to_state,
   intr_hreq.outbound_http_message AS outbound_http_message,
   intr_hreq.error_text AS error,
   intr_hreq.issues_count,
   intr_hreq.resource_types
  FROM cte_interaction AS intr_hreq
 ;

/*******************************************************************************************
The view techbd_udi_ingress.interaction_diagnostics retrieves diagnostic information from 
the techbd_udi_ingress.interaction_http_request_forward_fail object, extracting relevant fields 
such as bundleSessionId, validation_engine, and various details about issues encountered 
during interactions. It utilizes Common Table Expressions (CTEs) to structure the query, 
extracting data from nested JSON structures.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_diagnostics CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_diagnostics
AS WITH cte_interaction_issues AS(
SELECT 
	fwd_fail.interaction_id,
	fwd_fail.tenant_id,
	fwd_fail.uri,
	fwd_fail.interaction_created_at,
	fwd_fail.interaction_created_by,
	fwd_fail.interaction_provenance,
	fwd_fail.client_ip_address,
	fwd_fail.user_agent,
	fwd_fail.from_state,
	fwd_fail.to_state,
	fwd_fail.first_request -> 'payload' -> 'response' -> 'responseBody' -> 'OperationOutcome' ->> 'bundleSessionId' AS bundleSessionId,
	validation_results -> 'observability' ->> 'name' AS validation_engine,
	issue ->> 'message' AS issue_message,
	issue -> 'location' ->> 'line' AS issue_line,
	issue -> 'location' ->> 'column' AS issue_column,
	issue -> 'location' ->> 'diagnostics' AS issue_diagnostics,
	issue ->> 'severity' AS issue_type
FROM
	techbd_udi_ingress.interaction_http_request_forward_fail fwd_fail,
	jsonb_array_elements(first_request #> '{payload,response,responseBody,OperationOutcome,validationResults}') AS validation_results,
	jsonb_array_elements(validation_results -> 'issues') AS issue
   )
SELECT
	intr_issue.interaction_id,
	intr_issue.tenant_id,
	intr_issue.uri,
	intr_issue.interaction_created_at,
	intr_issue.interaction_created_by,
	intr_issue.interaction_provenance,
	intr_issue.client_ip_address,
	intr_issue.user_agent,
	intr_issue.from_state,
	intr_issue.to_state,
	intr_issue.bundleSessionId,
	intr_issue.validation_engine,
	intr_issue.issue_message,
	intr_issue.issue_line,
	intr_issue.issue_column,
	intr_issue.issue_diagnostics,
	intr_issue.issue_type
FROM
	cte_interaction_issues intr_issue
  ;

/*******************************************************************************************
This view combines data from hub_interaction and sat_interaction_http_request tables to 
provide a consolidated view of HTTP FHIR requests, including resource types, 
interaction details, request attributes, and validation issues.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_http_fhir_request CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_http_fhir_request
AS SELECT htt_req.hub_interaction_id AS interaction_id,
    htt_req.uri,
    htt_req.interaction_created_at AS interaction_created_at,
    htt_req.interaction_created_by AS interaction_created_by,
    htt_req.interaction_provenance AS interaction_provenance,
    htt_req.sat_interaction_http_request_id,
    htt_req.nature,
    htt_req.tenant_id,
    htt_req.user_agent,
    htt_req.client_ip_address,
    htt_req.content_type,
    htt_req.payload,
    htt_req.elaboration,
    htt_req.from_state,
    htt_req.to_state,
    htt_req.state_transition_reason,
    htt_req.request_created_at,
    htt_req.request_created_by,
    htt_req.request_provenance,
    htt_req.issues_count,
    rtyp.resource_types,
    intr_observe.start_time,
    intr_observe.finish_time,
    intr_observe.duration_millisecs
   FROM techbd_udi_ingress.interaction_http_request_mat htt_req
   LEFT OUTER JOIN techbd_udi_ingress.interaction_http_request_resource_type_mat rtyp  
   ON rtyp.sat_interaction_http_request_id = htt_req.sat_interaction_http_request_id
   AND rtyp.hub_interaction_id  = htt_req.hub_interaction_id
   LEFT OUTER JOIN techbd_udi_ingress.interaction_http_request_observe_mat intr_observe
   ON intr_observe.sat_interaction_http_request_id = htt_req.sat_interaction_http_request_id
   AND intr_observe.hub_interaction_id  = htt_req.hub_interaction_id 
   WHERE htt_req.uri = ANY (ARRAY['/Bundle'::text, '/Bundle/$validate'::text, '/Bundle/'::text, '/Bundle/$validate/'::text]);
   


/*******************************************************************************************
This view is to extract observability metrics from HTTP request interactions.This view joins 
data from sat_interaction_http_request with JSONB headers to retrieve specific observability 
metrics. Metrics extracted include start time, finish time, duration in nanoseconds, and 
duration in milliseconds. To optimize the query, use a LATERAL join to extract the JSONB 
values more efficiently. This approach avoids multiple jsonb_array_elements function calls 
for each row and reduces repeated scanning of the JSONB arrays.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_observe CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_observe
AS WITH cte_interaction_observe AS (			
SELECT sihr.sat_interaction_http_request_id AS interaction_http_request_id,
    sihr.hub_interaction_id AS interaction_id,
    headers.start_time,
    headers.finish_time,
    EXTRACT(EPOCH FROM (headers.finish_time::timestamp without time zone - headers.start_time::timestamp without time zone)) * 1000 AS duration_millisecs,
    (sihr.payload -> 'request'::text) ->> 'requestUri'::text AS uri
   FROM techbd_udi_ingress.sat_interaction_http_request sihr
     JOIN LATERAL ( SELECT max(
                CASE
                    WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Start-Time'::text THEN header.value ->> 'value'::text
                    ELSE NULL::text
                END) AS start_time,
            max(
                CASE
                    WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Finish-Time'::text THEN header.value ->> 'value'::text
                    ELSE NULL::text
                END) AS finish_time
           FROM jsonb_array_elements((sihr.payload -> 'response'::text) -> 'headers'::text) header(value)) headers ON true
  WHERE 1 = 1 AND (sihr.nature ->> 'nature'::text) = 'org.techbd.service.http.Interactions$RequestResponseEncountered'::text
)
SELECT 	intr_observe.interaction_id,
		intr_observe.uri,
		intr_observe.start_time,
		intr_observe.finish_time,   
		intr_observe.duration_millisecs,
		intr_observe.interaction_http_request_id
FROM cte_interaction_observe intr_observe
WHERE intr_observe.start_time IS NOT NULL AND intr_observe.finish_time IS NOT NULL
ORDER BY intr_observe.duration_millisecs DESC;

/*******************************************************************************************
This view extracts diagnostic information from JSON payloads of HTTP requests stored in 
'sat_interaction_http_request'. It transforms and presents fields such as 'tenant_id', 'uri', 
'session_id', 'severity', 'message', 'line', 'column', 'diagnostics', 'encounteredAt', 
and 'elaboration' for further analysis or reporting.
******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.fhir_session_diagnostics CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_session_diagnostics AS
WITH cte_interaction_diagnostics As(
SELECT	
    intr_hreq.payload->'request'->'tenant'->>'tenantId' AS tenant_id,
    intr_hreq.payload->'request'::TEXT ->> 'requestUri'::TEXT AS uri,
    intr_hreq.hub_interaction_id AS session_id,
    issue->>'severity' AS severity,
    issue->>'message' AS message,
    issue->'location'->>'line' AS line,
    issue->'location'->>'column' AS "column",
    issue->'location'->>'diagnostics' AS "diagnostics",
    intr_hreq.payload->'response'->>'encounteredAt'::text AS encounteredAt,
    intr_hreq.elaboration AS elaboration
FROM techbd_udi_ingress.sat_interaction_http_request intr_hreq,
LATERAL jsonb_array_elements(intr_hreq.payload->'response'->'responseBody'->'OperationOutcome'->'validationResults') AS validationResult,
LATERAL jsonb_array_elements(validationResult->'issues') AS issue
)
SELECT
intr_diagno.tenant_id,
intr_diagno.uri,
intr_diagno.session_id,
intr_diagno.severity,
intr_diagno.message,
intr_diagno.line,
intr_diagno."column",
intr_diagno."diagnostics",
intr_diagno.encounteredAt,
intr_diagno.elaboration
FROM cte_interaction_diagnostics intr_diagno
;

/*******************************************************************************************************************************
 * Procedure to register an HTTP interaction, handling potential unique constraint violations
 * and logging exceptions when necessary.
 *
 * @param interaction_id TEXT - The unique ID for the interaction.
 * @param interaction_key TEXT - A key to identify the interaction.
 * @param payload JSONB - The JSON payload associated with the interaction.
 * @param elaboration JSONB (nullable) - Additional JSON data elaborating the interaction. Default is NULL.
 * @param nature JSONB (nullable) - The nature of the HTTP interaction (including tenant, etc.).
 * @param content_type TEXT (nullable) - The content type of the HTTP interaction.
 * @param from_state TEXT (nullable) - The initial state before the HTTP interaction.
 * @param to_state TEXT (nullable) - The state after the HTTP interaction.
 * @param state_transition_reason TEXT (nullable) - The reason for the state transition.
 * @param created_at TIMESTAMPTZ (nullable) - The creation timestamp of the record. Defaults to the current timestamp if NULL.
 * @param created_by TEXT (nullable) - The user who created the record. Defaults to the current user if NULL.
 * @param provenance TEXT (nullable) - The provenance of the record. Defaults to 'unknown' if NULL.
 * @param hub_upsert_behavior BOOLEAN - Flag to control behavior on unique constraint violation. Default is TRUE.
 *                                      If TRUE, unique violation is not treated as an error.
 *                                      If FALSE, unique violation is treated as an error.
 *******************************************************************************************************************************/
CREATE OR REPLACE PROCEDURE techbd_udi_ingress.register_interaction_http_request(
    IN interaction_id TEXT,
    IN interaction_key TEXT,
    IN payload JSONB,
    IN elaboration JSONB DEFAULT NULL,
    IN nature JSONB DEFAULT NULL,
    IN content_type TEXT DEFAULT NULL,
    IN from_state TEXT DEFAULT NULL,
    IN to_state TEXT DEFAULT NULL,
    IN state_transition_reason TEXT DEFAULT NULL,
    IN created_at TIMESTAMPTZ DEFAULT NULL,
    IN created_by TEXT DEFAULT NULL,
    IN provenance TEXT DEFAULT NULL,
    IN hub_upsert_behavior BOOLEAN DEFAULT TRUE
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_error_msg TEXT;
    v_sqlstate TEXT;
    v_pg_detail TEXT;
    v_pg_hint TEXT;
    v_pg_context TEXT;
    v_created_at TIMESTAMPTZ := COALESCE(created_at, CURRENT_TIMESTAMP);
    v_created_by TEXT := COALESCE(created_by, current_user);
    v_provenance TEXT := COALESCE(provenance, 'unknown');
    v_exception_id TEXT;
BEGIN
    -- Attempt to insert into hub_interaction
    BEGIN
        INSERT INTO techbd_udi_ingress.hub_interaction (hub_interaction_id, key, created_at, created_by, provenance)
        VALUES (interaction_id, interaction_key, v_created_at, v_created_by, v_provenance);

    EXCEPTION
        WHEN unique_violation THEN
            IF NOT hub_upsert_behavior THEN
                -- Capture exception details
                GET STACKED DIAGNOSTICS
                    v_error_msg = MESSAGE_TEXT,
                    v_sqlstate = RETURNED_SQLSTATE,
                    v_pg_detail = PG_EXCEPTION_DETAIL,
                    v_pg_hint = PG_EXCEPTION_HINT,
                    v_pg_context = PG_EXCEPTION_CONTEXT;

                -- Call register_issue to log the exception and get the exception ID
                v_exception_id := techbd_udi_ingress.register_issue(
                    NULL, interaction_key, v_error_msg, v_sqlstate, v_pg_detail, v_pg_hint, v_pg_context, v_created_by, v_provenance
                );
            END IF;
    END;

    -- Attempt to insert into sat_interaction_http_request
    BEGIN
        INSERT INTO techbd_udi_ingress.sat_interaction_http_request (
            sat_interaction_http_request_id, hub_interaction_id, nature, content_type, payload, from_state, to_state, state_transition_reason, elaboration, created_at, created_by, provenance
        )
        VALUES (
            gen_random_uuid()::text, interaction_id, nature, content_type, payload, from_state, to_state, state_transition_reason, elaboration, v_created_at, v_created_by, v_provenance
        );

    EXCEPTION
        WHEN OTHERS THEN
            -- Capture exception details
            GET STACKED DIAGNOSTICS
                v_error_msg = MESSAGE_TEXT,
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_detail = PG_EXCEPTION_DETAIL,
                v_pg_hint = PG_EXCEPTION_HINT,
                v_pg_context = PG_EXCEPTION_CONTEXT;

            -- Log the exception, reusing the previous exception ID if it exists
            v_exception_id := techbd_udi_ingress.register_issue(
                COALESCE(v_exception_id, NULL), interaction_key, v_error_msg, v_sqlstate, v_pg_detail, v_pg_hint, v_pg_context, v_created_by, v_provenance
            );
    END;
END;
$$;

/*******************************************************************************************
 * Comprehensive view of Orchctl issue classification. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.orch_session_issue_classification CASCADE;
CREATE OR REPLACE
VIEW techbd_udi_ingress.orch_session_issue_classification as
WITH cte_business_rule AS (
SELECT
	worksheet AS worksheet,
	field AS field,
	required AS required,
	"Resolved by QE/QCS" AS resolved_by_qe_qcs,
	CONCAT(
          case
		when UPPER("True Rejection") = 'YES' then 'REJECTION'
		else ''
	end,
	case
		when UPPER("Warning Layer") = 'YES' then 'WARNING'
		else ''
	end
      ) AS record_action
FROM
	techbd_orch_ctl.business_rules
GROUP BY
	worksheet,
	field,
	required,
	resolved_by_qe_qcs,
	record_action
)
SELECT
	DISTINCT ON
	(isi.orch_session_issue_id) 
  isi.*,
	CASE
		WHEN
        UPPER(isi.issue_type) = 'MISSING COLUMN'
      THEN
        'STRUCTURAL ISSUE'
		ELSE
        br.record_action
	END
  AS disposition,
	CASE
		WHEN UPPER(br.resolved_by_qe_qcs) = 'YES' THEN 'Resolved By QE/QCS'
		ELSE null
	END AS remediation2
FROM
	techbd_orch_ctl.orch_session_issue AS isi
LEFT JOIN cte_business_rule br ON
	br.field = isi.issue_column
WHERE
	isi.orch_session_issue_id is not null
;

/*******************************************************************************************
 * Comprehensive view of SFTP interactions and their associated requests. * 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_sftp CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_sftp AS 
WITH issue_count AS (
SELECT
	osi.session_id,
	count(osi.orch_session_issue_id) AS issue_count
FROM
	techbd_udi_ingress.orch_session_issue_classification osi
GROUP BY
	osi.session_id
),
rejection_count AS (
SELECT
	osi.session_id,
	count(osi.orch_session_issue_id) AS rejection_count
FROM
	techbd_udi_ingress.orch_session_issue_classification osi
WHERE 
		osi.disposition = 'REJECTION'
GROUP BY
	osi.session_id
),
warning_count AS (
SELECT
	osi.session_id,
	count(osi.orch_session_issue_id) AS warning_count
FROM
	techbd_udi_ingress.orch_session_issue_classification osi
WHERE 
		osi.disposition = 'WARNING'
GROUP BY
	osi.session_id
)
SELECT
	"substring"(ose.ingest_src::text,
	'/SFTP/([^/]+)/'::text) AS qe,
	os.orch_started_at AS request_time,
	ose.session_id,
	os."version",
	count(ose.ingest_src) AS ingress_count,
	count(ose.ingest_src) AS consumed_count,
	coalesce(ic.issue_count,
	0) AS issue_count,
	coalesce(rc.rejection_count,
	0) AS rejection_count,
	coalesce(wc.warning_count,
	0) AS warning_count
FROM
	techbd_orch_ctl.orch_session_entry ose
JOIN techbd_orch_ctl.orch_session os ON
	ose.session_id = os.orch_session_id
LEFT JOIN issue_count ic ON
	ose.session_id = ic.session_id
LEFT JOIN rejection_count rc ON
	ose.session_id = rc.session_id
LEFT JOIN warning_count wc ON
	ose.session_id = wc.session_id
WHERE
	"substring"(ose.ingest_src::text,
	'/SFTP/([^/]+)/'::text) is not null
GROUP BY
	ose.session_id,
	qe,
	os."version",
	os.orch_started_at,
	ic.issue_count,
	rc.rejection_count,
	wc.warning_count;


/*******************************************************************************************
 * Comprehensive view of Latest FHIR Interactions per Tenant IDs* 
 ******************************************************************************************/
DROP VIEW IF EXISTS techbd_udi_ingress.interaction_recent_fhir CASCADE;
 CREATE OR REPLACE VIEW techbd_udi_ingress.interaction_recent_fhir AS
 WITH ranked_records AS (
    SELECT 
        sihr.sat_interaction_http_request_id,
        hi.hub_interaction_id AS interaction_id,
        sihr.nature ->> 'tenant_id'::text AS tenant_id,
        hi.created_at AS interaction_created_at,
        row_number() OVER (PARTITION BY (upper(sihr.nature ->> 'tenant_id'::text)) ORDER BY hi.created_at DESC) AS rn,
        COUNT(*)
 OVER (PARTITION BY (upper(sihr.nature ->> 'tenant_id'::text))) AS interaction_count
    FROM 
        techbd_udi_ingress.hub_interaction hi
    JOIN 
        techbd_udi_ingress.sat_interaction_http_request sihr 
        ON hi.hub_interaction_id = sihr.hub_interaction_id
    WHERE hi.key = ANY (ARRAY['/Bundle'::text, '/Bundle/$validate'::text, '/Bundle/'::text, '/Bundle/$validate/'::text])
)
SELECT 
    sat_interaction_http_request_id,
    interaction_id,
    tenant_id,
    interaction_created_at,
    interaction_count
FROM 
    ranked_records
WHERE rn = 1;



 /**
 * Function to retrieve the latest paginated list of FHIR interactions per tenant ID from the database.
 * This function returns a detailed view of the HTTP request interactions, including metadata
 * such as tenant ID, user agent, client IP address, content type, and payload. The function
 * also aggregates resource types involved in the interactions and calculates the duration
 * of each interaction in milliseconds.
 *
 * The function uses multiple Common Table Expressions (CTEs) to organize and extract
 * data:
 * 1. `cte_sihr`: Extracts core details of HTTP requests from the `sat_interaction_http_request` table.
 * 2. `cte_resource_types`: Aggregates resource types from the interaction payload.
 * 3. `cte_intr_observe`: Calculates the duration of each interaction using observability metrics from headers.
 *
 * The main SELECT query combines these CTEs to provide a comprehensive dataset for each
 * interaction, including:
 * - Interaction metadata (ID, URI, nature, states, etc.)
 * - Tenant and client information (tenant ID, user agent, client IP address)
 * - Payload details and elaboration
 * - Resource types involved
 * - Interaction duration in milliseconds
 *
 * @param offset_value NUMERIC (default 0) - The offset for pagination.
 * @param limit_value NUMERIC (default 100) - The limit for the number of rows returned.
 * @return TABLE - A table containing details of the latest FHIR interactions per tenant ID.
 */

 DROP FUNCTION IF EXISTS techbd_udi_ingress.get_interaction_http_request;
 CREATE OR REPLACE FUNCTION techbd_udi_ingress.get_interaction_http_request(offset_value numeric DEFAULT 0, limit_value numeric DEFAULT 100)
 RETURNS TABLE(sat_interaction_http_request_id text, interaction_id text, uri text, nature text, tenant_id text, user_agent text, client_ip_address text, content_type text, payload jsonb, elaboration jsonb, from_state text, to_state text, state_transition_reason text, request_created_at timestamp with time zone, request_created_by text, request_provenance text, interaction_created_at timestamp with time zone, interaction_created_by text, interaction_provenance text, issues_count integer, resource_types text, start_time text, finish_time text, duration_millisecs numeric)
 LANGUAGE plpgsql
    AS $function$
    BEGIN
        RETURN QUERY
        WITH cte_interaction AS (
            SELECT 
                sihr.sat_interaction_http_request_id,
                sihr.hub_interaction_id,
                sihr.content_type,
                sihr.payload,
                sihr.nature,
                sihr.elaboration,
                sihr.from_state,
                sihr.to_state,
                sihr.state_transition_reason,
                sihr.created_at AS request_created_at,
                sihr.created_by AS request_created_by,
                sihr.provenance AS request_provenance,
                hi.key AS uri,
                hi.created_at AS interaction_created_at,
                hi.created_by AS interaction_created_by,
                hi.provenance AS interaction_provenance
            FROM techbd_udi_ingress.hub_interaction hi
            INNER JOIN techbd_udi_ingress.sat_interaction_http_request sihr
            ON hi.hub_interaction_id = sihr.hub_interaction_id
            OFFSET offset_value ROWS
            FETCH NEXT limit_value ROWS ONLY
        ),
        cte_resource_types AS (
        SELECT 
            intr.sat_interaction_http_request_id,
            string_agg(DISTINCT (entry.value -> 'resource'::text) ->> 'resourceType'::text, ', '::text) AS resource_types
        FROM cte_interaction intr
        LEFT JOIN LATERAL jsonb_array_elements(intr.payload -> 'entry'::text) entry(value) ON true
        GROUP BY intr.sat_interaction_http_request_id
        ),
        cte_intr_observe AS (
            SELECT intr.sat_interaction_http_request_id,
                intr.hub_interaction_id,
                headers.start_time,
                headers.finish_time,
                EXTRACT(epoch FROM headers.finish_time::timestamp without time zone - headers.start_time::timestamp without time zone) * 1000::numeric AS duration_millisecs
            FROM cte_interaction intr
                JOIN LATERAL ( SELECT max(
                            CASE
                                WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Start-Time'::text THEN header.value ->> 'value'::text
                                ELSE NULL
                            END) AS start_time,
                        max(
                            CASE
                                WHEN (header.value ->> 'name'::text) = 'X-Observability-Metric-Interaction-Finish-Time'::text THEN header.value ->> 'value'::text
                                ELSE NULL
                            END) AS finish_time
                    FROM jsonb_array_elements((intr.payload -> 'response') -> 'headers') header(value)) headers ON true
            --WHERE (intr.nature ->> 'nature') = 'org.techbd.service.http.Interactions$RequestResponseEncountered'
            )
        SELECT
        intr.sat_interaction_http_request_id,
        intr.hub_interaction_id	AS interaction_id,
        intr.uri,
        intr.nature ->> 'nature' AS nature,
        intr.nature ->> 'tenant_id'::text AS tenant_id,
        COALESCE((intr.payload -> 'request') ->> 'userAgent', intr.nature ->> 'userAgent') AS user_agent,
        COALESCE((intr.payload -> 'request') ->> 'clientIpAddress', intr.nature ->> 'clientIpAddress') AS client_ip_address,
        intr.content_type,
        intr.payload,
        intr.elaboration,
        intr.from_state,
        intr.to_state,
        intr.state_transition_reason,
        intr.request_created_at,
        intr.request_created_by,
        intr.request_provenance,
        intr.interaction_created_at,
        intr.interaction_created_by,
        intr.interaction_provenance,
        jsonb_array_length((((((intr.payload -> 'response') -> 'responseBody') -> 'OperationOutcome') -> 'validationResults') -> 0) -> 'issues') AS issues_count,
        rt.resource_types,    
        obsrv.start_time,
        obsrv.finish_time,
        obsrv.duration_millisecs    
        FROM cte_interaction intr
        LEFT JOIN cte_resource_types rt ON intr.sat_interaction_http_request_id = rt.sat_interaction_http_request_id
        LEFT OUTER JOIN cte_intr_observe obsrv ON obsrv.sat_interaction_http_request_id = intr.sat_interaction_http_request_id
        ;
    END;
    $function$
    ;

/**
 * View to summarize FHIR submission interactions from the database.
 * This view provides an aggregated overview of HTTP request interactions based on
 * different types of nature values recorded in the `sat_interaction_http_request` table.
 * The view calculates the following metrics over the past 7 days:
 *
 * 1. `total_submissions`: Counts submissions where the nature is 'Original FHIR Payload'.
 * 2. `accepted_submissions`: Counts submissions where the nature is 'Forwarded HTTP Response'.
 * 3. `rejected_submissions`: Counts submissions where the nature is 'Forwarded HTTP Response Error'.
 * 4. `pending_submissions`: Counts submissions where the nature is neither 'Forwarded HTTP Response',
 *    'Forwarded HTTP Response Error', nor 'org.techbd.service.http.Interactions$RequestResponseEncountered'.
 *
 * This view aggregates data for all interactions related to FHIR submissions based on the following:
 * - Interaction metadata including the nature of HTTP requests.
 * - Filtering interactions that occurred in the last 7 days.
 * - Using a specific key value (`/Bundle`) to filter interactions.
 *
 * The view helps in monitoring and analyzing FHIR interaction statuses, providing insight into:
 * - Total count of submissions made in the specified period.
 * - Number of submissions that were accepted or rejected.
 * - Submissions that are pending or still not categorized as accepted or rejected.
 *
 * Usage:
 * SELECT * FROM techbd_udi_ingress.fhir_submission_summary;
 *
 * @return TABLE - A table summarizing total, accepted, rejected, and pending FHIR submissions
 *         for interactions within the past 7 days.
 */

DROP VIEW IF EXISTS techbd_udi_ingress.fhir_submission_summary CASCADE;

CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_submission_summary AS 
   WITH submission_counts AS (
    SELECT  
        --NONE    -> ACCEPT_FHIR_BUNDLE
        COUNT(CASE WHEN sihr.nature->>'nature' = 'Original FHIR Payload' THEN 1 END) AS total_submissions,
        --FORWARD-> COMPLETE
        COUNT(CASE WHEN sihr.nature->>'nature' = 'Forwarded HTTP Response' THEN 1 END) AS accepted_submissions,
        --FORWARD-> FAIL
        COUNT(CASE WHEN sihr.nature->>'nature' = 'Forwarded HTTP Response Error' THEN 1 END) AS rejected_submissions
    FROM 
        techbd_udi_ingress.hub_interaction AS hintr
        INNER JOIN techbd_udi_ingress.sat_interaction_http_request AS sihr
        ON hintr.hub_interaction_id = sihr.hub_interaction_id
    WHERE 
        hintr."key" = '/Bundle'
        AND sihr.created_at >= CURRENT_DATE - INTERVAL '7 days'
)
SELECT  
    total_submissions,
    accepted_submissions,
    rejected_submissions,
    total_submissions - accepted_submissions - rejected_submissions AS pending_submissions
FROM 
    submission_counts;


/**
 * View to summarize FHIR submission interactions and categorize them for further analysis.
 * This view provides an aggregated overview of HTTP request interactions based on
 * different types of nature values recorded in the `sat_interaction_http_request` table.
 * The view calculates the following metrics over the past 7 days:
 *
 * 1. `qe_total_submissions`: Counts submissions where the nature is 'Original FHIR Payload'.
 * 2. `techbd_total_submissions`: Counts submissions where the nature is 'Forward HTTP Request'.
 * 3. `scoring_engine_submissions`: Counts submissions where the nature is 'Forwarded HTTP Response'.
 *
 * In addition to the calculated metrics, the view includes placeholders for custom fields:
 * - `cross_roads_scn`: Placeholder for additional contextual information or classification.
 * - `shinny`: Placeholder for additional contextual information or classification.
 * - `mdw`: Placeholder for additional contextual information or classification.
 *
 * This view aggregates data for all interactions related to FHIR submissions based on the following:
 * - Interaction metadata including the nature of HTTP requests.
 * - Filtering interactions that occurred in the last 7 days.
 * - Using a specific key value (`/Bundle`) to filter interactions.
 *
 * The view helps in monitoring and analyzing FHIR interaction statuses, providing insight into:
 * - Total number of submissions made in the specified period.
 * - Number of submissions that were forwarded for HTTP requests.
 * - Number of submissions that received a response from the scoring engine.
 * - Custom fields for additional classification or context.
 *
 * Usage:
 * SELECT * FROM techbd_udi_ingress.fhir_needs_attention;
 *
 * @return TABLE - A table summarizing total, forwarded, and scoring engine submissions
 *         for interactions within the past 7 days, including custom fields for additional classification.
 */


DROP VIEW IF EXISTS techbd_udi_ingress.fhir_needs_attention CASCADE;
CREATE OR REPLACE VIEW techbd_udi_ingress.fhir_needs_attention AS  
WITH submission_counts AS (
    SELECT  
        sihr.nature->>'tenant_id' as qe_name,
        COUNT(CASE WHEN sihr.nature->>'nature' = 'Original FHIR Payload' THEN 1 END) AS qe_total_submissions,
        COUNT(CASE WHEN sihr.nature->>'nature' = 'Forward HTTP Request' THEN 1 END) AS techbd_total_submissions,
        COUNT(CASE WHEN sihr.nature->>'nature' = 'Forwarded HTTP Response' THEN 1 END) AS scoring_engine_submissions
    FROM 
        techbd_udi_ingress.hub_interaction AS hintr
        INNER JOIN techbd_udi_ingress.sat_interaction_http_request AS sihr
        ON hintr.hub_interaction_id = sihr.hub_interaction_id
    WHERE 
        hintr."key" = '/Bundle'
        AND sihr.created_at >= CURRENT_DATE - INTERVAL '7 days'
    GROUP BY sihr.nature->>'tenant_id'
)
SELECT  
    '??' as cross_roads_scn,
    qe_name,
    qe_total_submissions,
    techbd_total_submissions,
    scoring_engine_submissions,
    '??' as shinny,
    '??' as mdw
FROM 
    submission_counts;


/*************************************
* The stored procedure register_expectation_http_request aims to insert expectation data into two tables: hub_expectation and sat_expectation_http_request. It performs the following steps:

* Input Parameters:

* expectation_id: Unique identifier for the expectation.
* expectation_key: Key associated with the expectation.
* payload: JSONB data containing the request payload.
* content_type (optional): Type of content being registered.
* created_at (optional): Timestamp when the record was created.
* created_by (optional): User who created the record.
* provenance (optional): Source of the record.
* hub_upsert_behavior (optional): Boolean flag to determine upsert behavior (default is true).
*
* Default Values:
*
* v_created_at: Defaults to the current timestamp if not provided.
* v_created_by: Defaults to the current user if not provided.
* v_provenance: Defaults to 'unknown' if not provided.
*
* Insert into hub_expectation:
*
* Attempts to insert the expectation data into the hub_expectation table.
* If a unique constraint violation occurs and hub_upsert_behavior is false, it logs the exception details by calling techbd_udi_ingress.register_issue.
* Insert into sat_expectation_http_request:

* Attempts to insert the HTTP request details into the sat_expectation_http_request table.
* If any exception occurs, it logs the exception details and associates it with a previously logged exception if available.
* Exception Handling:

* Captures various exception details such as error message, SQL state, and additional context.
* Logs the captured exception details using techbd_udi_ingress.register_issue. 
****************************************************************************/

DROP PROCEDURE IF EXISTS techbd_udi_ingress.register_expectation_http_request;
CREATE OR REPLACE PROCEDURE techbd_udi_ingress.register_expectation_http_request(IN expectation_id text, IN expectation_key text, IN payload jsonb, IN content_type text DEFAULT NULL::text, IN created_at timestamp with time zone DEFAULT NULL::timestamp with time zone, IN created_by text DEFAULT NULL::text, IN provenance text DEFAULT NULL::text, IN hub_upsert_behavior boolean DEFAULT true)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
    v_error_msg TEXT;
    v_sqlstate TEXT;
    v_pg_detail TEXT;
    v_pg_hint TEXT;
    v_pg_context TEXT;
    v_created_at TIMESTAMPTZ := COALESCE(created_at, CURRENT_TIMESTAMP);
    v_created_by TEXT := COALESCE(created_by, current_user);
    v_provenance TEXT := COALESCE(provenance, 'unknown');
    v_exception_id TEXT;
BEGIN
    -- Attempt to insert into hub_expectation
    BEGIN
        INSERT INTO techbd_udi_ingress.hub_expectation (hub_expectation_id, key, created_at, created_by, provenance)
        VALUES (expectation_id, expectation_key, v_created_at, v_created_by, v_provenance);

    EXCEPTION
        WHEN unique_violation THEN
            IF NOT hub_upsert_behavior THEN
                -- Capture exception details
                GET STACKED DIAGNOSTICS
                    v_error_msg = MESSAGE_TEXT,
                    v_sqlstate = RETURNED_SQLSTATE,
                    v_pg_detail = PG_EXCEPTION_DETAIL,
                    v_pg_hint = PG_EXCEPTION_HINT,
                    v_pg_context = PG_EXCEPTION_CONTEXT;

                -- Call register_issue to log the exception and get the exception ID
                v_exception_id := techbd_udi_ingress.register_issue(
                    NULL, expectation_key, v_error_msg, v_sqlstate, v_pg_detail, v_pg_hint, v_pg_context, v_created_by, v_provenance
                );
            END IF;
    END;

    -- Attempt to insert into sat_expectation_http_request
    BEGIN
        INSERT INTO techbd_udi_ingress.sat_expectation_http_request (
            sat_expectation_http_request_id, hub_expectation_id, content_type, payload, created_at, created_by, provenance
        )
        VALUES (
            gen_random_uuid()::text, expectation_id, content_type, payload, v_created_at, v_created_by, v_provenance);

    EXCEPTION
        WHEN OTHERS THEN
            -- Capture exception details
            GET STACKED DIAGNOSTICS
                v_error_msg = MESSAGE_TEXT,
                v_sqlstate = RETURNED_SQLSTATE,
                v_pg_detail = PG_EXCEPTION_DETAIL,
                v_pg_hint = PG_EXCEPTION_HINT,
                v_pg_context = PG_EXCEPTION_CONTEXT;

            -- Log the exception, reusing the previous exception ID if it exists
            v_exception_id := techbd_udi_ingress.register_issue(
                COALESCE(v_exception_id, NULL), expectation_key, v_error_msg, v_sqlstate, v_pg_detail, v_pg_hint, v_pg_context, v_created_by, v_provenance
            );
    END;
END;
$procedure$
;    